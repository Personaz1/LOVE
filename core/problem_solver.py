"""
ŒîŒ£ Guardian Problem Solver v4.0
–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import json
import logging
import re
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime
from dataclasses import dataclass
from enum import Enum

from ai_client.core.client import AIClient
from ai_client.utils.logger import Logger
from core.scheduler import scheduler, TaskPriority

logger = Logger()

class ProblemSeverity(Enum):
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class ProblemStatus(Enum):
    DETECTED = "detected"
    ANALYZING = "analyzing"
    SOLVING = "solving"
    SOLVED = "solved"
    FAILED = "failed"
    IGNORED = "ignored"

@dataclass
class Problem:
    id: str
    title: str
    description: str
    severity: ProblemSeverity
    status: ProblemStatus
    detected_at: datetime
    category: str
    context: Dict[str, Any]
    solution_attempts: List[Dict[str, Any]]
    auto_fix_enabled: bool = True
    
    def __post_init__(self):
        if self.solution_attempts is None:
            self.solution_attempts = []

class ProblemSolver:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º –¥–ª—è ŒîŒ£ Guardian"""
    
    def __init__(self):
        self.ai_client = AIClient()
        self.problems: Dict[str, Problem] = {}
        self.solution_templates: Dict[str, str] = {}
        self.auto_fix_enabled = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Ä–µ—à–µ–Ω–∏–π
        self._load_solution_templates()
        
        logger.info("üîß ŒîŒ£ Problem Solver initialized")
    
    def _load_solution_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–µ—à–µ–Ω–∏–π"""
        self.solution_templates = {
            "memory_overflow": """
            –ü—Ä–æ–±–ª–µ–º–∞: –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
            –†–µ—à–µ–Ω–∏–µ:
            1. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            2. –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
            3. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            """,
            "api_error": """
            –ü—Ä–æ–±–ª–µ–º–∞: –û—à–∏–±–∫–∞ API
            –†–µ—à–µ–Ω–∏–µ:
            1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
            2. –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞
            3. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å
            """,
            "performance_degradation": """
            –ü—Ä–æ–±–ª–µ–º–∞: –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            –†–µ—à–µ–Ω–∏–µ:
            1. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
            2. –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            """,
            "security_issue": """
            –ü—Ä–æ–±–ª–µ–º–∞: –ü—Ä–æ–±–ª–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            –†–µ—à–µ–Ω–∏–µ:
            1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            2. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            3. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            """,
            "user_experience": """
            –ü—Ä–æ–±–ª–µ–º–∞: –ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
            –†–µ—à–µ–Ω–∏–µ:
            1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            2. –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            3. –£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            """
        }
    
    def detect_problem(self, title: str, description: str, severity: ProblemSeverity,
                      category: str = "general", context: Dict[str, Any] = None) -> str:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–±–ª–µ–º—ã"""
        problem_id = f"problem_{int(datetime.now().timestamp() * 1000)}"
        
        problem = Problem(
            id=problem_id,
            title=title,
            description=description,
            severity=severity,
            status=ProblemStatus.DETECTED,
            detected_at=datetime.now(),
            category=category,
            context=context or {},
            solution_attempts=[]
        )
        
        self.problems[problem_id] = problem
        logger.warning(f"üö® Problem detected: {title} ({severity.value})")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
        if severity in [ProblemSeverity.CRITICAL, ProblemSeverity.HIGH]:
            self.analyze_problem(problem_id)
        
        return problem_id
    
    def analyze_problem(self, problem_id: str) -> Dict[str, Any]:
        """AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã"""
        if problem_id not in self.problems:
            return {"error": "Problem not found"}
        
        problem = self.problems[problem_id]
        problem.status = ProblemStatus.ANALYZING
        
        logger.info(f"üîç Analyzing problem: {problem.title}")
        
        # –°–æ–∑–¥–∞–µ–º AI-–ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_prompt = f"""
        –ü—Ä–æ–±–ª–µ–º–∞: {problem.title}
        –û–ø–∏—Å–∞–Ω–∏–µ: {problem.description}
        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {problem.category}
        –ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(problem.context, ensure_ascii=False)}
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏:
        1. –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã
        2. –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π
        4. –†–∏—Å–∫–∏ –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
        
        –í–µ—Ä–Ω–∏ –∞–Ω–∞–ª–∏–∑ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.
        """
        
        try:
            response = self.ai_client.chat(analysis_prompt)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            analysis = self._extract_json_from_response(response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫ –ø—Ä–æ–±–ª–µ–º–µ
            problem.solution_attempts.append({
                "type": "analysis",
                "timestamp": datetime.now().isoformat(),
                "result": analysis
            })
            
            logger.info(f"‚úÖ Problem analyzed: {problem.title}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.auto_fix_enabled and problem.auto_fix_enabled:
                self.solve_problem(problem_id)
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Problem analysis failed: {e}")
            problem.status = ProblemStatus.FAILED
            return {"error": str(e)}
    
    def solve_problem(self, problem_id: str) -> Dict[str, Any]:
        """–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        if problem_id not in self.problems:
            return {"error": "Problem not found"}
        
        problem = self.problems[problem_id]
        problem.status = ProblemStatus.SOLVING
        
        logger.info(f"üõ†Ô∏è Solving problem: {problem.title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
        if not problem.solution_attempts:
            self.analyze_problem(problem_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è
        solution_plan = self._create_solution_plan(problem)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω
        results = []
        for step in solution_plan:
            try:
                result = self._execute_solution_step(step, problem)
                results.append({
                    "step": step,
                    "result": result,
                    "success": "error" not in result
                })
            except Exception as e:
                results.append({
                    "step": step,
                    "result": {"error": str(e)},
                    "success": False
                })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã
        success_count = sum(1 for r in results if r["success"])
        if success_count > 0:
            problem.status = ProblemStatus.SOLVED
            logger.info(f"‚úÖ Problem solved: {problem.title}")
        else:
            problem.status = ProblemStatus.FAILED
            logger.error(f"‚ùå Problem solving failed: {problem.title}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        problem.solution_attempts.append({
            "type": "solution",
            "timestamp": datetime.now().isoformat(),
            "results": results
        })
        
        return {
            "problem_id": problem_id,
            "status": problem.status.value,
            "results": results,
            "success_rate": success_count / len(results) if results else 0
        }
    
    def _create_solution_plan(self, problem: Problem) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
        if problem.category in self.solution_templates:
            template = self.solution_templates[problem.category]
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
            plan = []
            lines = template.split('\n')
            current_step = None
            
            for line in lines:
                if line.strip().startswith('1.') or line.strip().startswith('2.') or line.strip().startswith('3.'):
                    if current_step:
                        plan.append(current_step)
                    current_step = {
                        "action": line.strip(),
                        "type": "template_based"
                    }
            
            if current_step:
                plan.append(current_step)
            
            return plan
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
            plan_prompt = f"""
            –ü—Ä–æ–±–ª–µ–º–∞: {problem.title}
            –û–ø–∏—Å–∞–Ω–∏–µ: {problem.description}
            
            –°–æ–∑–¥–∞–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã.
            –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º.
            
            –í–µ—Ä–Ω–∏ –ø–ª–∞–Ω –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
            [
                {{"action": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", "type": "ai_generated"}},
                ...
            ]
            """
            
            response = self.ai_client.chat(plan_prompt)
            try:
                return self._extract_json_from_response(response)
            except:
                return [{"action": "Manual intervention required", "type": "manual"}]
    
    def _execute_solution_step(self, step: Dict[str, Any], problem: Problem) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ —Ä–µ—à–µ–Ω–∏—è"""
        action = step.get("action", "")
        step_type = step.get("type", "unknown")
        
        logger.info(f"üîß Executing step: {action}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if step_type == "template_based":
            return self._execute_template_action(action, problem)
        elif step_type == "ai_generated":
            return self._execute_ai_action(action, problem)
        else:
            return {"error": f"Unknown step type: {step_type}"}
    
    def _execute_template_action(self, action: str, problem: Problem) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        action_lower = action.lower()
        
        if "–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å" in action_lower or "archive" in action_lower:
            return self._archive_old_data()
        elif "–æ—á–∏—Å—Ç–∏—Ç—å" in action_lower or "clear" in action_lower:
            return self._clear_cache()
        elif "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å" in action_lower or "optimize" in action_lower:
            return self._optimize_performance()
        elif "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å" in action_lower or "check" in action_lower:
            return self._check_system_health()
        elif "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å" in action_lower or "restart" in action_lower:
            return self._restart_services()
        else:
            return {"warning": f"Unknown template action: {action}"}
    
    def _execute_ai_action(self, action: str, problem: Problem) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        execution_prompt = f"""
        –î–µ–π—Å—Ç–≤–∏–µ: {action}
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã: {problem.description}
        
        –í—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.
        """
        
        try:
            response = self.ai_client.chat(execution_prompt)
            return self._extract_json_from_response(response)
        except Exception as e:
            return {"error": f"AI action execution failed: {str(e)}"}
    
    def _archive_old_data(self) -> Dict[str, Any]:
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from memory.conversation_history import conversation_history
            conversation_history._archive_old_messages()
            return {"success": True, "action": "archived_old_data"}
        except Exception as e:
            return {"error": f"Archive failed: {str(e)}"}
    
    def _clear_cache(self) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        try:
            from ai_client.utils.cache import system_cache
            system_cache.clear()
            return {"success": True, "action": "cleared_cache"}
        except Exception as e:
            return {"error": f"Cache clear failed: {str(e)}"}
    
    def _optimize_performance(self) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
            scheduler.create_task(
                name="performance_optimization",
                description="System performance optimization",
                priority=TaskPriority.HIGH,
                task_type="optimization"
            )
            return {"success": True, "action": "scheduled_optimization"}
        except Exception as e:
            return {"error": f"Optimization failed: {str(e)}"}
    
    def _check_system_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from ai_client.tools.system_tools import SystemTools
            system_tools = SystemTools()
            health_report = system_tools.diagnose_system_health()
            return {"success": True, "action": "health_check", "report": health_report}
        except Exception as e:
            return {"error": f"Health check failed: {str(e)}"}
    
    def _restart_services(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            scheduler.create_task(
                name="service_restart",
                description="Restart critical services",
                priority=TaskPriority.CRITICAL,
                task_type="restart"
            )
            return {"success": True, "action": "scheduled_restart"}
        except Exception as e:
            return {"error": f"Restart failed: {str(e)}"}
    
    def _extract_json_from_response(self, response: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ AI-–æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
            else:
                return {"result": response, "raw_response": True}
        except:
            return {"result": response, "raw_response": True}
    
    def get_problem_status(self, problem_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
        if problem_id not in self.problems:
            return {"error": "Problem not found"}
        
        problem = self.problems[problem_id]
        return {
            "id": problem.id,
            "title": problem.title,
            "status": problem.status.value,
            "severity": problem.severity.value,
            "detected_at": problem.detected_at.isoformat(),
            "solution_attempts": len(problem.solution_attempts)
        }
    
    def get_all_problems(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º"""
        return [self.get_problem_status(pid) for pid in self.problems.keys()]
    
    def auto_detect_problems(self) -> List[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"""
        detected_problems = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
            from ai_client.tools.system_tools import SystemTools
            system_tools = SystemTools()
            health_report = system_tools.diagnose_system_health()
            
            if "‚ùå" in health_report:
                problem_id = self.detect_problem(
                    title="System Health Issues",
                    description="System health check revealed problems",
                    severity=ProblemSeverity.HIGH,
                    category="system_health",
                    context={"health_report": health_report}
                )
                detected_problems.append(problem_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
            from memory.conversation_history import conversation_history
            stats = conversation_history.get_statistics()
            
            if stats.get('total_messages', 0) > 200:
                problem_id = self.detect_problem(
                    title="Memory Overflow",
                    description="Conversation history is getting large",
                    severity=ProblemSeverity.MEDIUM,
                    category="memory_overflow",
                    context={"stats": stats}
                )
                detected_problems.append(problem_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if len(self.problems) > 10:
                problem_id = self.detect_problem(
                    title="Performance Degradation",
                    description="Too many problems detected",
                    severity=ProblemSeverity.MEDIUM,
                    category="performance",
                    context={"problem_count": len(self.problems)}
                )
                detected_problems.append(problem_id)
                
        except Exception as e:
            logger.error(f"‚ùå Auto-detection failed: {e}")
        
        return detected_problems
    
    def schedule_periodic_checks(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        scheduler.schedule_periodic_task(
            task_type="problem_detection",
            interval_minutes=5,
            name="Auto Problem Detection",
            description="Automatically detect and solve problems",
            priority=TaskPriority.BACKGROUND
        )
        
        logger.info("üìÖ Scheduled periodic problem detection")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ—à–∞—Ç–µ–ª—è –ø—Ä–æ–±–ª–µ–º
problem_solver = ProblemSolver() 