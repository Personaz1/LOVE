"""
ŒîŒ£ Guardian Core Scheduler v4.0
–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Callable
from dataclasses import dataclass, asdict
from enum import Enum
import threading
import time

from ai_client.core.client import AIClient
from ai_client.utils.logger import Logger

logger = Logger()

class TaskPriority(Enum):
    CRITICAL = 0
    HIGH = 1
    NORMAL = 2
    LOW = 3
    BACKGROUND = 4

class TaskStatus(Enum):
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"

@dataclass
class Task:
    id: str
    name: str
    description: str
    priority: TaskPriority
    status: TaskStatus
    created_at: datetime
    scheduled_for: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    dependencies: List[str] = None
    tags: List[str] = None
    context: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.dependencies is None:
            self.dependencies = []
        if self.tags is None:
            self.tags = []
        if self.context is None:
            self.context = {}

class Scheduler:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è ŒîŒ£ Guardian"""
    
    def __init__(self):
        self.ai_client = AIClient()
        self.tasks: Dict[str, Task] = {}
        self.task_handlers: Dict[str, Callable] = {}
        self.running = False
        self.background_thread = None
        self.tick_interval = 1.0  # —Å–µ–∫—É–Ω–¥—ã
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_default_handlers()
        
        logger.info("üß† ŒîŒ£ Scheduler initialized")
    
    def _register_default_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á"""
        self.register_handler("system_health_check", self._system_health_check)
        self.register_handler("memory_optimization", self._memory_optimization)
        self.register_handler("context_analysis", self._context_analysis)
        self.register_handler("personality_adjustment", self._personality_adjustment)
        self.register_handler("learning_cycle", self._learning_cycle)
        self.register_handler("security_scan", self._security_scan)
    
    def register_handler(self, task_type: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        self.task_handlers[task_type] = handler
        logger.info(f"üìù Registered handler for task type: {task_type}")
    
    def add_task(self, task: Task) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        self.tasks[task.id] = task
        logger.info(f"‚ûï Added task: {task.name} (priority: {task.priority.name})")
        return task.id
    
    def create_task(self, name: str, description: str, priority: TaskPriority = TaskPriority.NORMAL,
                   task_type: str = None, context: Dict[str, Any] = None, 
                   scheduled_for: Optional[datetime] = None, dependencies: List[str] = None,
                   tags: List[str] = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        task_id = f"{task_type or 'general'}_{int(time.time() * 1000)}"
        
        task = Task(
            id=task_id,
            name=name,
            description=description,
            priority=priority,
            status=TaskStatus.PENDING,
            created_at=datetime.now(),
            scheduled_for=scheduled_for,
            dependencies=dependencies or [],
            tags=tags or [],
            context=context or {}
        )
        
        return self.add_task(task)
    
    def get_ready_tasks(self) -> List[Task]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á"""
        now = datetime.now()
        ready_tasks = []
        
        for task in self.tasks.values():
            if (task.status == TaskStatus.PENDING and
                (task.scheduled_for is None or task.scheduled_for <= now) and
                self._dependencies_met(task)):
                ready_tasks.append(task)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        ready_tasks.sort(key=lambda t: t.priority.value)
        return ready_tasks
    
    def _dependencies_met(self, task: Task) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        for dep_id in task.dependencies:
            if dep_id not in self.tasks:
                return False
            dep_task = self.tasks[dep_id]
            if dep_task.status != TaskStatus.COMPLETED:
                return False
        return True
    
    async def execute_task(self, task: Task) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            logger.info(f"üöÄ Executing task: {task.name}")
            task.status = TaskStatus.RUNNING
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            task_type = task.name.split('_')[0] if '_' in task.name else 'general'
            
            if task_type in self.task_handlers:
                result = await self.task_handlers[task_type](task)
            else:
                # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ AI
                result = await self._ai_task_handler(task)
            
            task.result = result
            task.status = TaskStatus.COMPLETED
            task.completed_at = datetime.now()
            
            logger.info(f"‚úÖ Task completed: {task.name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Task failed: {task.name} - {str(e)}")
            task.status = TaskStatus.FAILED
            task.error = str(e)
            return False
    
    async def _ai_task_handler(self, task: Task) -> Dict[str, Any]:
        """AI-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á"""
        prompt = f"""
        –ó–∞–¥–∞—á–∞: {task.name}
        –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}
        –ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(task.context, ensure_ascii=False)}
        
        –í—ã–ø–æ–ª–Ω–∏ —ç—Ç—É –∑–∞–¥–∞—á—É –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.
        """
        
        response = self.ai_client.chat(prompt)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            import re
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
            else:
                return {"result": response, "raw_response": True}
        except:
            return {"result": response, "raw_response": True}
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á
    
    async def _system_health_check(self, task: Task) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        from ai_client.tools.system_tools import SystemTools
        system_tools = SystemTools()
        
        health_report = system_tools.diagnose_system_health()
        
        return {
            "health_status": "healthy" if "‚úÖ" in health_report else "warning",
            "report": health_report,
            "timestamp": datetime.now().isoformat()
        }
    
    async def _memory_optimization(self, task: Task) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏"""
        # –ê–Ω–∞–ª–∏–∑ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        from memory.conversation_history import conversation_history
        
        stats = conversation_history.get_statistics()
        
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
        if stats.get('total_messages', 0) > 100:
            conversation_history._archive_old_messages()
        
        return {
            "optimization_performed": True,
            "memory_stats": stats,
            "timestamp": datetime.now().isoformat()
        }
    
    async def _context_analysis(self, task: Task) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from memory.user_profiles import UserProfile
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
        user_profile = UserProfile("stepan")
        emotional_trends = user_profile.get_emotional_trends()
        
        return {
            "emotional_analysis": emotional_trends,
            "context_insights": "User shows positive emotional trend",
            "timestamp": datetime.now().isoformat()
        }
    
    async def _personality_adjustment(self, task: Task) -> Dict[str, Any]:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        from memory.conversation_history import conversation_history
        
        recent_history = conversation_history.get_recent_history(limit=10)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formal_count = sum(1 for msg in recent_history if any(word in msg.get('message', '').lower() 
                           for word in ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Å–ø–∞—Å–∏–±–æ', '–∏–∑–≤–∏–Ω–∏—Ç–µ']))
        casual_count = len(recent_history) - formal_count
        
        communication_style = "formal" if formal_count > casual_count else "casual"
        
        return {
            "communication_style": communication_style,
            "adjustment_made": True,
            "timestamp": datetime.now().isoformat()
        }
    
    async def _learning_cycle(self, task: Task) -> Dict[str, Any]:
        """–¶–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è –æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        from memory.conversation_history import conversation_history
        
        history = conversation_history.get_full_history()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
        topics = []
        for msg in history[-20:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'message' in msg:
                topics.extend(msg['message'].split()[:5])  # –ü–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤
        
        common_topics = list(set(topics))
        
        return {
            "learned_patterns": common_topics,
            "interaction_count": len(history),
            "learning_cycle_completed": True,
            "timestamp": datetime.now().isoformat()
        }
    
    async def _security_scan(self, task: Task) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        from memory.conversation_history import conversation_history
        
        recent_messages = conversation_history.get_recent_history(limit=50)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        suspicious_patterns = ['password', 'credit card', 'ssn', 'private key']
        suspicious_count = 0
        
        for msg in recent_messages:
            message_text = msg.get('message', '').lower()
            if any(pattern in message_text for pattern in suspicious_patterns):
                suspicious_count += 1
        
        security_status = "secure" if suspicious_count == 0 else "warning"
        
        return {
            "security_status": security_status,
            "suspicious_activity_count": suspicious_count,
            "scan_completed": True,
            "timestamp": datetime.now().isoformat()
        }
    
    async def tick(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.running:
            return
        
        ready_tasks = self.get_ready_tasks()
        
        for task in ready_tasks[:3]:  # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∑–∞–¥–∞—á–∏ –∑–∞ —Ç–∏–∫
            await self.execute_task(task)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        pending_count = len([t for t in self.tasks.values() if t.status == TaskStatus.PENDING])
        completed_count = len([t for t in self.tasks.values() if t.status == TaskStatus.COMPLETED])
        
        if ready_tasks or pending_count > 0:
            logger.info(f"üîÑ Scheduler tick: {len(ready_tasks)} ready, {pending_count} pending, {completed_count} completed")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = True
        self.background_thread = threading.Thread(target=self._run_loop, daemon=True)
        self.background_thread.start()
        logger.info("üöÄ ŒîŒ£ Scheduler started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        if self.background_thread:
            self.background_thread.join()
        logger.info("üõë ŒîŒ£ Scheduler stopped")
    
    def _run_loop(self):
        """–§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        while self.running:
            try:
                loop.run_until_complete(self.tick())
                time.sleep(self.tick_interval)
            except Exception as e:
                logger.error(f"‚ùå Scheduler loop error: {e}")
                time.sleep(self.tick_interval)
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        task_counts = {}
        for status in TaskStatus:
            task_counts[status.value] = len([t for t in self.tasks.values() if t.status == status])
        
        return {
            "running": self.running,
            "total_tasks": len(self.tasks),
            "task_counts": task_counts,
            "ready_tasks": len(self.get_ready_tasks()),
            "uptime": time.time() if self.running else 0
        }
    
    def schedule_periodic_task(self, task_type: str, interval_minutes: int, 
                             name: str, description: str, priority: TaskPriority = TaskPriority.BACKGROUND):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
        def schedule_next():
            next_time = datetime.now() + timedelta(minutes=interval_minutes)
            task_id = self.create_task(
                name=f"{name}_{int(time.time())}",
                description=description,
                priority=priority,
                task_type=task_type,
                scheduled_for=next_time
            )
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            threading.Timer(interval_minutes * 60, schedule_next).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        schedule_next()
        logger.info(f"üìÖ Scheduled periodic task: {name} (every {interval_minutes} minutes)")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = Scheduler() 