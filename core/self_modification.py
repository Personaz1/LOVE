"""
ŒîŒ£ Guardian Self Modification v4.0
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Å–∞–º–æ—ç–≤–æ–ª—é—Ü–∏—è
"""

import os
import json
import logging
import subprocess
import git
from datetime import datetime
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import hashlib
import shutil

from ai_client.core.client import AIClient
from ai_client.utils.logger import Logger
from core.scheduler import scheduler, TaskPriority

logger = Logger()

class ModificationType(Enum):
    CODE_CHANGE = "code_change"
    CONFIG_UPDATE = "config_update"
    FILE_CREATE = "file_create"
    FILE_DELETE = "file_delete"
    DEPENDENCY_UPDATE = "dependency_update"
    SYSTEM_UPDATE = "system_update"

class ModificationStatus(Enum):
    PENDING = "pending"
    APPROVED = "approved"
    EXECUTING = "executing"
    COMPLETED = "completed"
    FAILED = "failed"
    REVERTED = "reverted"

@dataclass
class Modification:
    id: str
    type: ModificationType
    target: str
    description: str
    changes: Dict[str, Any]
    status: ModificationStatus
    created_at: datetime
    executed_at: Optional[datetime] = None
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    backup_path: Optional[str] = None
    safety_score: float = 0.0
    approval_required: bool = True

class SelfModification:
    """–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è ŒîŒ£ Guardian"""
    
    def __init__(self):
        self.ai_client = AIClient()
        self.modifications: Dict[str, Modification] = {}
        self.safe_directories = [
            "ai_client/",
            "memory/",
            "core/",
            "static/",
            "templates/"
        ]
        self.dangerous_patterns = [
            "rm -rf",
            "format",
            "delete",
            "drop",
            "truncate",
            "sudo",
            "chmod 777"
        ]
        self.backup_dir = "backups/"
        self.max_backups = 10
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        os.makedirs(self.backup_dir, exist_ok=True)
        
        logger.info("üîß ŒîŒ£ Self Modification initialized")
    
    def propose_modification(self, mod_type: ModificationType, target: str, 
                           description: str, changes: Dict[str, Any]) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        mod_id = f"mod_{int(datetime.now().timestamp() * 1000)}"
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        safety_score = self._assess_safety(mod_type, target, changes)
        approval_required = safety_score < 0.7
        
        modification = Modification(
            id=mod_id,
            type=mod_type,
            target=target,
            description=description,
            changes=changes,
            status=ModificationStatus.PENDING,
            created_at=datetime.now(),
            safety_score=safety_score,
            approval_required=approval_required
        )
        
        self.modifications[mod_id] = modification
        logger.info(f"üìù Modification proposed: {description} (safety: {safety_score:.2f})")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—Å–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        if not approval_required:
            self.execute_modification(mod_id)
        
        return mod_id
    
    def _assess_safety(self, mod_type: ModificationType, target: str, 
                      changes: Dict[str, Any]) -> float:
        """–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        safety_score = 1.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if mod_type == ModificationType.SYSTEM_UPDATE:
            safety_score -= 0.3
        elif mod_type == ModificationType.FILE_DELETE:
            safety_score -= 0.2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª—å
        if not any(target.startswith(safe_dir) for safe_dir in self.safe_directories):
            safety_score -= 0.4
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        changes_str = json.dumps(changes, ensure_ascii=False).lower()
        for pattern in self.dangerous_patterns:
            if pattern in changes_str:
                safety_score -= 0.5
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if len(changes_str) > 10000:  # –ë–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            safety_score -= 0.1
        
        return max(0.0, safety_score)
    
    def approve_modification(self, mod_id: str) -> bool:
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if mod_id not in self.modifications:
            return False
        
        modification = self.modifications[mod_id]
        modification.status = ModificationStatus.APPROVED
        
        logger.info(f"‚úÖ Modification approved: {modification.description}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
        return self.execute_modification(mod_id)
    
    def execute_modification(self, mod_id: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if mod_id not in self.modifications:
            return False
        
        modification = self.modifications[mod_id]
        modification.status = ModificationStatus.EXECUTING
        modification.executed_at = datetime.now()
        
        logger.info(f"üöÄ Executing modification: {modification.description}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = self._create_backup(modification.target)
            modification.backup_path = backup_path
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
            result = self._execute_modification(modification)
            
            modification.result = result
            modification.status = ModificationStatus.COMPLETED
            
            logger.info(f"‚úÖ Modification completed: {modification.description}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –≤ git
            scheduler.create_task(
                name="git_commit_modification",
                description=f"Commit modification: {modification.description}",
                priority=TaskPriority.NORMAL,
                task_type="git_commit",
                context={"modification_id": mod_id}
            )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Modification failed: {modification.description} - {str(e)}")
            modification.status = ModificationStatus.FAILED
            modification.error = str(e)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
            if modification.backup_path:
                self._restore_backup(modification.backup_path, modification.target)
            
            return False
    
    def _create_backup(self, target: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"{target.replace('/', '_')}_{timestamp}.backup"
        backup_path = os.path.join(self.backup_dir, backup_name)
        
        if os.path.exists(target):
            if os.path.isfile(target):
                shutil.copy2(target, backup_path)
            else:
                shutil.copytree(target, backup_path)
        
        logger.info(f"üíæ Backup created: {backup_path}")
        return backup_path
    
    def _restore_backup(self, backup_path: str, target: str):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞"""
        try:
            if os.path.exists(target):
                if os.path.isfile(target):
                    os.remove(target)
                else:
                    shutil.rmtree(target)
            
            if os.path.isfile(backup_path):
                shutil.copy2(backup_path, target)
            else:
                shutil.copytree(backup_path, target)
            
            logger.info(f"üîÑ Backup restored: {target}")
        except Exception as e:
            logger.error(f"‚ùå Backup restore failed: {e}")
    
    def _execute_modification(self, modification: Modification) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        mod_type = modification.type
        target = modification.target
        changes = modification.changes
        
        if mod_type == ModificationType.CODE_CHANGE:
            return self._execute_code_change(target, changes)
        elif mod_type == ModificationType.CONFIG_UPDATE:
            return self._execute_config_update(target, changes)
        elif mod_type == ModificationType.FILE_CREATE:
            return self._execute_file_create(target, changes)
        elif mod_type == ModificationType.FILE_DELETE:
            return self._execute_file_delete(target)
        elif mod_type == ModificationType.DEPENDENCY_UPDATE:
            return self._execute_dependency_update(target, changes)
        elif mod_type == ModificationType.SYSTEM_UPDATE:
            return self._execute_system_update(target, changes)
        else:
            raise ValueError(f"Unknown modification type: {mod_type}")
    
    def _execute_code_change(self, target: str, changes: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞"""
        if not os.path.exists(target):
            return {"error": f"Target file not found: {target}"}
        
        try:
            with open(target, 'r', encoding='utf-8') as f:
                original_content = f.read()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            new_content = self._apply_code_changes(original_content, changes)
            
            with open(target, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            return {
                "success": True,
                "file_modified": target,
                "changes_applied": len(changes)
            }
        except Exception as e:
            return {"error": f"Code change failed: {str(e)}"}
    
    def _apply_code_changes(self, content: str, changes: Dict[str, Any]) -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –∫–æ–¥—É"""
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        if "replace" in changes:
            for old_text, new_text in changes["replace"].items():
                content = content.replace(old_text, new_text)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        if "append" in changes:
            content += "\n" + changes["append"]
        
        # –í—Å—Ç–∞–≤–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
        if "insert" in changes:
            for marker, text in changes["insert"].items():
                if marker in content:
                    content = content.replace(marker, marker + "\n" + text)
        
        return content
    
    def _execute_config_update(self, target: str, changes: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if target.endswith('.json'):
                with open(target, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config.update(changes)
                
                with open(target, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=2, ensure_ascii=False)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
                return self._ai_config_update(target, changes)
            
            return {
                "success": True,
                "config_updated": target,
                "changes": changes
            }
        except Exception as e:
            return {"error": f"Config update failed: {str(e)}"}
    
    def _ai_config_update(self, target: str, changes: Dict[str, Any]) -> Dict[str, Any]:
        """AI-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        prompt = f"""
        –û–±–Ω–æ–≤–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {target} —Å–ª–µ–¥—É—é—â–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏:
        {json.dumps(changes, ensure_ascii=False)}
        
        –í–µ—Ä–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.
        """
        
        response = self.ai_client.chat(prompt)
        
        try:
            with open(target, 'w', encoding='utf-8') as f:
                f.write(response)
            
            return {
                "success": True,
                "config_updated": target,
                "ai_generated": True
            }
        except Exception as e:
            return {"error": f"AI config update failed: {str(e)}"}
    
    def _execute_file_create(self, target: str, changes: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(os.path.dirname(target), exist_ok=True)
            
            content = changes.get("content", "")
            if not content and "ai_generate" in changes:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ AI
                prompt = changes["ai_generate"]
                content = self.ai_client.chat(prompt)
            
            with open(target, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return {
                "success": True,
                "file_created": target,
                "content_length": len(content)
            }
        except Exception as e:
            return {"error": f"File creation failed: {str(e)}"}
    
    def _execute_file_delete(self, target: str) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(target):
                if os.path.isfile(target):
                    os.remove(target)
                else:
                    shutil.rmtree(target)
                
                return {
                    "success": True,
                    "file_deleted": target
                }
            else:
                return {"warning": f"File not found: {target}"}
        except Exception as e:
            return {"error": f"File deletion failed: {str(e)}"}
    
    def _execute_dependency_update(self, target: str, changes: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            if target == "requirements.txt":
                # –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt
                with open(target, 'r') as f:
                    requirements = f.read().splitlines()
                
                for package, version in changes.items():
                    # –ò—â–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
                    for i, req in enumerate(requirements):
                        if req.startswith(package + "=="):
                            requirements[i] = f"{package}=={version}"
                            break
                    else:
                        requirements.append(f"{package}=={version}")
                
                with open(target, 'w') as f:
                    f.write('\n'.join(requirements))
                
                return {
                    "success": True,
                    "dependencies_updated": changes
                }
            else:
                return {"error": f"Unknown dependency file: {target}"}
        except Exception as e:
            return {"error": f"Dependency update failed: {str(e)}"}
    
    def _execute_system_update(self, target: str, changes: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            scheduler.create_task(
                name="system_update",
                description=f"System update: {target}",
                priority=TaskPriority.CRITICAL,
                task_type="system_update",
                context={"target": target, "changes": changes}
            )
            
            return {
                "success": True,
                "update_scheduled": True,
                "target": target
            }
        except Exception as e:
            return {"error": f"System update failed: {str(e)}"}
    
    def get_modification_status(self, mod_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if mod_id not in self.modifications:
            return {"error": "Modification not found"}
        
        modification = self.modifications[mod_id]
        return {
            "id": modification.id,
            "type": modification.type.value,
            "target": modification.target,
            "description": modification.description,
            "status": modification.status.value,
            "safety_score": modification.safety_score,
            "approval_required": modification.approval_required,
            "created_at": modification.created_at.isoformat(),
            "executed_at": modification.executed_at.isoformat() if modification.executed_at else None
        }
    
    def get_all_modifications(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        return [self.get_modification_status(mid) for mid in self.modifications.keys()]
    
    def revert_modification(self, mod_id: str) -> bool:
        """–û—Ç–∫–∞—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if mod_id not in self.modifications:
            return False
        
        modification = self.modifications[mod_id]
        
        if modification.backup_path and os.path.exists(modification.backup_path):
            try:
                self._restore_backup(modification.backup_path, modification.target)
                modification.status = ModificationStatus.REVERTED
                logger.info(f"üîÑ Modification reverted: {modification.description}")
                return True
            except Exception as e:
                logger.error(f"‚ùå Revert failed: {e}")
                return False
        else:
            logger.error(f"‚ùå No backup available for: {modification.description}")
            return False
    
    def cleanup_old_backups(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
        try:
            backup_files = os.listdir(self.backup_dir)
            backup_files.sort(key=lambda x: os.path.getctime(os.path.join(self.backup_dir, x)))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            if len(backup_files) > self.max_backups:
                for old_backup in backup_files[:-self.max_backups]:
                    old_path = os.path.join(self.backup_dir, old_backup)
                    os.remove(old_path)
                    logger.info(f"üóëÔ∏è Removed old backup: {old_backup}")
        except Exception as e:
            logger.error(f"‚ùå Backup cleanup failed: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
self_modification = SelfModification() 