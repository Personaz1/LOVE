"""
Smart Home Core Controller
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–º–Ω–æ–≥–æ –¥–æ–º–∞ —Å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import asyncio
import json
import logging
from typing import Dict, Any, List, Optional, Callable
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from enum import Enum

import paho.mqtt.client as mqtt
from ai_client.utils.cache import system_cache

logger = logging.getLogger(__name__)

class SecurityMode(Enum):
    """–†–µ–∂–∏–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    DISARMED = "disarmed"
    ARMED_HOME = "armed_home" 
    ARMED_AWAY = "armed_away"
    ARMED_NIGHT = "armed_night"
    LOCKDOWN = "lockdown"

@dataclass
class SensorData:
    """–î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–∞"""
    sensor_id: str
    sensor_type: str
    value: Any
    timestamp: datetime
    location: str
    zone: str
    status: str = "normal"

@dataclass
class ActuatorCommand:
    """–ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç—É–∞—Ç–æ—Ä—É"""
    actuator_id: str
    command: str
    parameters: Dict[str, Any]
    priority: int = 1
    timestamp: datetime = None

class SmartHomeController:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–º–Ω–æ–≥–æ –¥–æ–º–∞"""
    
    def __init__(self, mqtt_broker: str = "localhost", mqtt_port: int = 1883):
        self.mqtt_broker = mqtt_broker
        self.mqtt_port = mqtt_port
        self.mqtt_client = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.security_mode = SecurityMode.DISARMED
        self.sensors: Dict[str, SensorData] = {}
        self.actuators: Dict[str, Any] = {}
        self.automations: List[Dict] = []
        
        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        self.event_subscribers: List[Callable] = []
        
        # –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.cache = system_cache
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logger
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT
            await self._setup_mqtt()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self._load_config()
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            asyncio.create_task(self._monitor_system())
            
            self.logger.info("‚úÖ Smart Home Controller initialized")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to initialize Smart Home Controller: {e}")
            raise
    
    async def _setup_mqtt(self):
        """Setup MQTT connection with error handling"""
        try:
            self.mqtt_client = mqtt.Client()
            self.mqtt_client.on_connect = self._on_mqtt_connect
            self.mqtt_client.on_message = self._on_mqtt_message
            
            self.mqtt_client.connect(self.mqtt_broker, self.mqtt_port, 60)
            self.mqtt_client.loop_start()
            
            # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫–∏
            topics = [
                "smart_home/sensors/+/data",
                "smart_home/actuators/+/status", 
                "smart_home/security/events",
                "smart_home/automation/triggers"
            ]
            
            for topic in topics:
                self.mqtt_client.subscribe(topic)
                
            logger.info(f"‚úÖ MQTT connected to {self.mqtt_broker}:{self.mqtt_port}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è MQTT connection failed: {e}")
            logger.info("‚ÑπÔ∏è Smart Home will work without MQTT connection")
            # Don't raise exception - allow system to continue without MQTT
    
    def _on_mqtt_connect(self, client, userdata, flags, rc):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MQTT"""
        self.logger.info(f"‚úÖ Connected to MQTT broker: {self.mqtt_broker}")
    
    def _on_mqtt_message(self, client, userdata, msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π MQTT"""
        try:
            topic = msg.topic
            payload = json.loads(msg.payload.decode())
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            asyncio.create_task(self._process_mqtt_message(topic, payload))
                
        except Exception as e:
            self.logger.error(f"‚ùå MQTT message processing error: {e}")
    
    async def _process_mqtt_message(self, topic: str, payload: Dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ MQTT —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
            if "sensors" in topic and "data" in topic:
                await self._handle_sensor_data(payload)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤
            elif "actuators" in topic and "status" in topic:
                await self._handle_actuator_status(payload)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            elif "security/events" in topic:
                await self._handle_security_event(payload)
                
        except Exception as e:
            self.logger.error(f"‚ùå MQTT message processing error: {e}")
    
    async def _handle_sensor_data(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–∞"""
        sensor_id = data.get("sensor_id")
        sensor_data = SensorData(
            sensor_id=sensor_id,
            sensor_type=data.get("type"),
            value=data.get("value"),
            timestamp=datetime.fromisoformat(data.get("timestamp")),
            location=data.get("location"),
            zone=data.get("zone"),
            status=data.get("status", "normal")
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        self.sensors[sensor_id] = sensor_data
        await self._cache_sensor_data(sensor_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π
        await self._check_automations(sensor_data)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        await self._notify_subscribers("sensor_update", sensor_data)
    
    async def _handle_actuator_status(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        actuator_id = data.get("actuator_id")
        self.actuators[actuator_id] = data
        
        await self._notify_subscribers("actuator_update", data)
    
    async def _handle_security_event(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        event_type = data.get("event_type")
        
        if event_type == "intrusion_detected":
            await self._handle_intrusion(data)
        elif event_type == "fire_detected":
            await self._handle_fire(data)
        elif event_type == "gas_leak":
            await self._handle_gas_leak(data)
    
    async def _handle_intrusion(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è"""
        self.logger.warning("üö® INTRUSION DETECTED")
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–≤–æ–≥–∏
        await self.set_security_mode(SecurityMode.LOCKDOWN)
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Ä–µ–Ω –∏ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–æ–≤
        await self._activate_alarm_system()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await self._send_notifications("üö® –í—Ç–æ—Ä–∂–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
    
    async def _handle_fire(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–∞—Ä–∞"""
        self.logger.warning("üî• FIRE DETECTED")
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–∞–∑–∞
        await self._shut_off_gas()
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–æ–≤
        await self._unlock_all_exits()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await self._send_notifications("üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–∂–∞—Ä!")
    
    async def _handle_gas_leak(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–µ—á–∫–∏ –≥–∞–∑–∞"""
        self.logger.warning("‚ö†Ô∏è GAS LEAK DETECTED")
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–∞–∑–∞
        await self._shut_off_gas()
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
        await self._activate_ventilation()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await self._send_notifications("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Ç–µ—á–∫–∞ –≥–∞–∑–∞!")
    
    async def set_security_mode(self, mode: SecurityMode):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.security_mode = mode
        self.logger.info(f"üîí Security mode changed to: {mode.value}")
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ MQTT
        self.mqtt_client.publish(
            "smart_home/security/mode",
            json.dumps({"mode": mode.value, "timestamp": datetime.now().isoformat()})
        )
        
        await self._notify_subscribers("security_mode_change", {"mode": mode.value})
    
    async def _activate_alarm_system(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–≤–æ–≥–∏"""
        commands = [
            ActuatorCommand("siren_main", "activate", {"volume": "high"}),
            ActuatorCommand("strobe_lights", "activate", {"pattern": "emergency"}),
            ActuatorCommand("spotlights", "activate", {"brightness": "max"})
        ]
        
        for cmd in commands:
            await self._send_actuator_command(cmd)
    
    async def _shut_off_gas(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–∞–∑–∞"""
        cmd = ActuatorCommand("gas_valve", "close", {})
        await self._send_actuator_command(cmd)
    
    async def _unlock_all_exits(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–æ–≤"""
        exits = ["front_door", "back_door", "garage_door", "emergency_exit"]
        
        for exit_id in exits:
            cmd = ActuatorCommand(exit_id, "unlock", {})
            await self._send_actuator_command(cmd)
    
    async def _activate_ventilation(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏"""
        cmd = ActuatorCommand("ventilation_system", "activate", {"mode": "emergency"})
        await self._send_actuator_command(cmd)
    
    async def _send_actuator_command(self, command: ActuatorCommand):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç—É–∞—Ç–æ—Ä—É"""
        if command.timestamp is None:
            command.timestamp = datetime.now()
        
        payload = asdict(command)
        payload["timestamp"] = command.timestamp.isoformat()
        
        topic = f"smart_home/actuators/{command.actuator_id}/command"
        self.mqtt_client.publish(topic, json.dumps(payload))
        
        self.logger.info(f"üì§ Sent command to {command.actuator_id}: {command.command}")
    
    async def _cache_sensor_data(self, sensor_data: SensorData):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–∞"""
        cache_key = f"sensor_{sensor_data.sensor_id}"
        await self.cache.set(
            "smart_home_sensor",
            asdict(sensor_data),
            {"sensor_id": sensor_data.sensor_id},
            ttl_seconds=3600
        )
    
    async def _check_automations(self, sensor_data: SensorData):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π"""
        for automation in self.automations:
            if await self._evaluate_automation_condition(automation, sensor_data):
                await self._execute_automation(automation)
    
    async def _evaluate_automation_condition(self, automation: Dict, sensor_data: SensorData) -> bool:
        """–û—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        condition = automation.get("condition", {})
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∏–ø—É —Å–µ–Ω—Å–æ—Ä–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—é
        if condition.get("sensor_type") == sensor_data.sensor_type:
            if condition.get("value") == sensor_data.value:
                return True
        
        return False
    
    async def _execute_automation(self, automation: Dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        actions = automation.get("actions", [])
        
        for action in actions:
            actuator_id = action.get("actuator_id")
            command = action.get("command")
            parameters = action.get("parameters", {})
            
            cmd = ActuatorCommand(actuator_id, command, parameters)
            await self._send_actuator_command(cmd)
    
    async def _notify_subscribers(self, event_type: str, data: Any):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        for subscriber in self.event_subscribers:
            try:
                await subscriber(event_type, data)
            except Exception as e:
                self.logger.error(f"‚ùå Subscriber notification error: {e}")
    
    async def _send_notifications(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.logger.info(f"üì± Notification: {message}")
    
    async def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        pass
    
    async def _monitor_system(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤
                await self._check_sensor_health()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤
                await self._check_actuator_health()
                
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                self.logger.error(f"‚ùå System monitoring error: {e}")
                await asyncio.sleep(60)
    
    async def _check_sensor_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ–Ω—Å–æ—Ä–æ–≤"""
        current_time = datetime.now()
        
        for sensor_id, sensor_data in self.sensors.items():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            if (current_time - sensor_data.timestamp) > timedelta(minutes=5):
                self.logger.warning(f"‚ö†Ô∏è Sensor {sensor_id} data is stale")
    
    async def _check_actuator_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤
        pass
    
    def subscribe_to_events(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
        self.event_subscribers.append(callback)
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "security_mode": self.security_mode.value,
            "sensors_count": len(self.sensors),
            "actuators_count": len(self.actuators),
            "automations_count": len(self.automations),
            "timestamp": datetime.now().isoformat()
        }
    
    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        if self.mqtt_client:
            self.mqtt_client.loop_stop()
            self.mqtt_client.disconnect()
        
        self.logger.info("üîÑ Smart Home Controller shutdown complete") 

    def publish_message(self, topic: str, message: str):
        """Publish message to MQTT topic with connection check"""
        try:
            if hasattr(self, 'mqtt_client') and self.mqtt_client:
                self.mqtt_client.publish(topic, message)
                logger.info(f"üì° MQTT published to {topic}: {message}")
            else:
                logger.warning(f"‚ö†Ô∏è MQTT not connected, skipping publish to {topic}")
        except Exception as e:
            logger.error(f"‚ùå MQTT publish error: {e}") 