"""
Smart Home LLM Integration
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è LLM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –¥–æ–º–æ–º
"""

import asyncio
import json
import logging
from typing import Dict, List, Optional, Any, Callable
from datetime import datetime
from dataclasses import dataclass, asdict

# Import AIClient only when needed to avoid circular import
# from ai_client.core.client import AIClient
from ai_client.utils.cache import system_cache

logger = logging.getLogger(__name__)

@dataclass
class LLMCommand:
    """–ö–æ–º–∞–Ω–¥–∞ LLM"""
    command_id: str
    user_input: str
    interpreted_command: str
    parameters: Dict[str, Any]
    confidence: float
    timestamp: datetime
    executed: bool = False
    result: str = None
    error: str = None

class LLMHomeAssistant:
    """LLM –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–º–Ω–æ–≥–æ –¥–æ–º–∞"""
    
    def __init__(self, ai_client):
        self.ai_client = ai_client
        self.logger = logger
        self.cache = system_cache
        
        # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥
        self.command_history: List[LLMCommand] = []
        
        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
        self.command_subscribers: List[Callable] = []
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º—ã
        self.system_context: Dict[str, Any] = {}
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
        self.system_prompt = self._get_system_prompt()
        
    def _get_system_prompt(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM"""
        return """
–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –¥–æ–º–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–∏—Å—Ç–µ–º—ã.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤:
- –°–µ–Ω—Å–æ—Ä—ã: motion, temperature, humidity, pressure, light, sound, vibration, gas, smoke, door, window, water_leak, electricity, magnetic, infrared, ultrasonic, lidar, thermal, radar
- –ê–∫—Ç—É–∞—Ç–æ—Ä—ã: light, lock, siren, camera, valve, motor, heater, cooler, ventilator, blind, curtain, gate, door, window, turret, laser, strobe, speaker, pump, compressor

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- –î–ª—è —Å–≤–µ—Ç–∞: turn_on, turn_off, set_brightness, set_color
- –î–ª—è –∑–∞–º–∫–æ–≤: lock, unlock, toggle
- –î–ª—è —Å–∏—Ä–µ–Ω: activate, deactivate, set_pattern
- –î–ª—è –∫–∞–º–µ—Ä: pan, tilt, zoom, record
- –î–ª—è –∫–ª–∞–ø–∞–Ω–æ–≤: open, close, set_position
- –î–ª—è –º–æ—Ç–æ—Ä–æ–≤: start, stop, set_speed
- –î–ª—è —Ç—É—Ä–µ–ª–µ–π: aim, track, fire

–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:
- "–í–∫–ª—é—á–∏ —Å–≤–µ—Ç –≤ –≥–æ—Å—Ç–∏–Ω–æ–π" ‚Üí light_command: turn_on, location: living_room
- "–ó–∞–∫—Ä–æ–π –≤—Å–µ –¥–≤–µ—Ä–∏" ‚Üí lock_command: lock, all_doors: true
- "–ê–∫—Ç–∏–≤–∏—Ä—É–π —Ç—Ä–µ–≤–æ–≥—É" ‚Üí siren_command: activate, volume: high
- "–ü–æ–∫–∞–∂–∏ –∫–∞–º–µ—Ä—É –∑–∞–¥–Ω–µ–≥–æ –¥–≤–æ—Ä–∞" ‚Üí camera_command: pan, location: backyard

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏:
{
    "command_type": "—Ç–∏–ø_–∫–æ–º–∞–Ω–¥—ã",
    "device_type": "—Ç–∏–ø_—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", 
    "device_id": "id_—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    "action": "–¥–µ–π—Å—Ç–≤–∏–µ",
    "parameters": {"–ø–∞—Ä–∞–º–µ—Ç—Ä": "–∑–Ω–∞—á–µ–Ω–∏–µ"},
    "confidence": 0.95,
    "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
}
"""
    
    async def process_user_command(self, user_input: str, context: Dict[str, Any] = None) -> LLMCommand:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if context:
                self.system_context.update(context)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            full_prompt = self._build_prompt(user_input)
            
            # –ó–∞–ø—Ä–æ—Å –∫ LLM
            response = await self.ai_client.chat(
                messages=[{"role": "system", "content": self.system_prompt},
                         {"role": "user", "content": full_prompt}],
                temperature=0.1
            )
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
            command_data = self._parse_llm_response(response)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            command = LLMCommand(
                command_id=f"cmd_{datetime.now().timestamp()}",
                user_input=user_input,
                interpreted_command=command_data.get("command_type", "unknown"),
                parameters=command_data.get("parameters", {}),
                confidence=command_data.get("confidence", 0.0),
                timestamp=datetime.now()
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.command_history.append(command)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            await self._notify_command_subscribers(command)
            
            self.logger.info(f"ü§ñ LLM processed command: {command.interpreted_command}")
            
            return command
            
        except Exception as e:
            self.logger.error(f"‚ùå LLM command processing error: {e}")
            return None
    
    def _build_prompt(self, user_input: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        context_info = ""
        
        if self.system_context:
            context_info = f"\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º—ã:\n{json.dumps(self.system_context, indent=2, ensure_ascii=False)}"
        
        return f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "{user_input}"

{context_info}

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω–∏ JSON –æ—Ç–≤–µ—Ç.
"""
    
    def _parse_llm_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM"""
        try:
            # –ü–æ–∏—Å–∫ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            start_idx = response.find('{')
            end_idx = response.rfind('}') + 1
            
            if start_idx != -1 and end_idx != -1:
                json_str = response[start_idx:end_idx]
                return json.loads(json_str)
            else:
                # Fallback - –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                return json.loads(response)
                
        except json.JSONDecodeError as e:
            self.logger.warning(f"‚ö†Ô∏è Failed to parse LLM response: {e}")
            return {
                "command_type": "unknown",
                "parameters": {},
                "confidence": 0.0,
                "explanation": "Failed to parse LLM response"
            }
    
    async def execute_command(self, command: LLMCommand) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã LLM"""
        try:
            command_type = command.interpreted_command
            parameters = command.parameters
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
            if command_type == "light_command":
                result = await self._execute_light_command(parameters)
            elif command_type == "lock_command":
                result = await self._execute_lock_command(parameters)
            elif command_type == "siren_command":
                result = await self._execute_siren_command(parameters)
            elif command_type == "camera_command":
                result = await self._execute_camera_command(parameters)
            elif command_type == "valve_command":
                result = await self._execute_valve_command(parameters)
            elif command_type == "motor_command":
                result = await self._execute_motor_command(parameters)
            elif command_type == "turret_command":
                result = await self._execute_turret_command(parameters)
            elif command_type == "system_command":
                result = await self._execute_system_command(parameters)
            else:
                result = False
                command.error = f"Unknown command type: {command_type}"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã
            command.executed = True
            command.result = "success" if result else "failed"
            
            self.logger.info(f"‚úÖ Executed LLM command: {command_type}")
            return result
            
        except Exception as e:
            command.executed = True
            command.error = str(e)
            self.logger.error(f"‚ùå LLM command execution error: {e}")
            return False
    
    async def _execute_light_command(self, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å–≤–µ—â–µ–Ω–∏—è"""
        action = parameters.get("action")
        device_id = parameters.get("device_id")
        
        if action == "turn_on":
            # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
            return True
        elif action == "turn_off":
            # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
            return True
        elif action == "set_brightness":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
            brightness = parameters.get("brightness", 100)
            return 0 <= brightness <= 100
        elif action == "set_color":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞
            return True
        
        return False
    
    async def _execute_lock_command(self, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–º–∫–∞"""
        action = parameters.get("action")
        device_id = parameters.get("device_id")
        
        if action == "lock":
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            return True
        elif action == "unlock":
            # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            return True
        elif action == "toggle":
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
            return True
        
        return False
    
    async def _execute_siren_command(self, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–∏—Ä–µ–Ω—ã"""
        action = parameters.get("action")
        volume = parameters.get("volume", "medium")
        
        if action == "activate":
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏—Ä–µ–Ω—ã
            return volume in ["low", "medium", "high"]
        elif action == "deactivate":
            # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏—Ä–µ–Ω—ã
            return True
        
        return False
    
    async def _execute_camera_command(self, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–º–µ—Ä—ã"""
        action = parameters.get("action")
        
        if action == "pan":
            # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            angle = parameters.get("angle", 0)
            return -180 <= angle <= 180
        elif action == "tilt":
            # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            angle = parameters.get("angle", 0)
            return -90 <= angle <= 90
        elif action == "zoom":
            # –ó—É–º
            level = parameters.get("level", 1)
            return 1 <= level <= 10
        elif action == "record":
            # –ó–∞–ø–∏—Å—å
            return True
        
        return False
    
    async def _execute_valve_command(self, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–ª–∞–ø–∞–Ω–∞"""
        action = parameters.get("action")
        
        if action == "open":
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–ø–∞–Ω–∞
            return True
        elif action == "close":
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–ø–∞–Ω–∞
            return True
        elif action == "set_position":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
            position = parameters.get("position", 0)
            return 0 <= position <= 100
        
        return False
    
    async def _execute_motor_command(self, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ—Ç–æ—Ä–∞"""
        action = parameters.get("action")
        
        if action == "start":
            # –ó–∞–ø—É—Å–∫ –º–æ—Ç–æ—Ä–∞
            return True
        elif action == "stop":
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–∞
            return True
        elif action == "set_speed":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
            speed = parameters.get("speed", 0)
            return 0 <= speed <= 100
        
        return False
    
    async def _execute_turret_command(self, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–µ–ª–∏"""
        action = parameters.get("action")
        
        if action == "aim":
            # –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª—å
            x = parameters.get("x", 0)
            y = parameters.get("y", 0)
            return -180 <= x <= 180 and -90 <= y <= 90
        elif action == "track":
            # –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ —Ü–µ–ª—å—é
            target_id = parameters.get("target_id")
            return target_id is not None
        elif action == "fire":
            # –°—Ç—Ä–µ–ª—å–±–∞ (–∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ)
            return True
        
        return False
    
    async def _execute_system_command(self, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        action = parameters.get("action")
        
        if action == "get_status":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            return True
        elif action == "set_mode":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞
            mode = parameters.get("mode")
            return mode in ["home", "away", "night", "vacation"]
        elif action == "emergency":
            # –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º
            return True
        
        return False
    
    async def _notify_command_subscribers(self, command: LLMCommand):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –∫–æ–º–∞–Ω–¥–∞—Ö"""
        for subscriber in self.command_subscribers:
            try:
                await subscriber(command)
            except Exception as e:
                self.logger.error(f"‚ùå Command subscriber error: {e}")
    
    def subscribe_to_commands(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã LLM"""
        self.command_subscribers.append(callback)
    
    def get_command_history(self, limit: int = 50) -> List[LLMCommand]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥"""
        return self.command_history[-limit:] if self.command_history else []
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã LLM"""
        total_commands = len(self.command_history)
        successful_commands = len([c for c in self.command_history if c.executed and c.result == "success"])
        failed_commands = len([c for c in self.command_history if c.executed and c.result == "failed"])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–º–∞–Ω–¥
        command_types = {}
        for cmd in self.command_history:
            cmd_type = cmd.interpreted_command
            command_types[cmd_type] = command_types.get(cmd_type, 0) + 1
        
        return {
            "total_commands": total_commands,
            "successful_commands": successful_commands,
            "failed_commands": failed_commands,
            "command_types": command_types,
            "timestamp": datetime.now().isoformat()
        }
    
    async def update_system_context(self, context: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.system_context.update(context)
        self.logger.info(f"üîÑ Updated system context: {len(context)} items")
    
    async def clear_context(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.system_context.clear()
        self.logger.info("üóëÔ∏è Cleared system context")
    
    def export_history(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥"""
        return {
            "commands": [
                {
                    "command_id": cmd.command_id,
                    "user_input": cmd.user_input,
                    "interpreted_command": cmd.interpreted_command,
                    "parameters": cmd.parameters,
                    "confidence": cmd.confidence,
                    "timestamp": cmd.timestamp.isoformat(),
                    "executed": cmd.executed,
                    "result": cmd.result,
                    "error": cmd.error
                }
                for cmd in self.command_history
            ]
        } 