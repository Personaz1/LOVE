"""
Smart Home Actuators Manager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞–º–∏ —É–º–Ω–æ–≥–æ –¥–æ–º–∞
"""

import asyncio
import json
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
from dataclasses import dataclass, asdict
from enum import Enum

logger = logging.getLogger(__name__)

class ActuatorType(Enum):
    """–¢–∏–ø—ã –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤"""
    LIGHT = "light"
    LOCK = "lock"
    SIREN = "siren"
    CAMERA = "camera"
    VALVE = "valve"
    MOTOR = "motor"
    HEATER = "heater"
    COOLER = "cooler"
    VENTILATOR = "ventilator"
    BLIND = "blind"
    CURTAIN = "curtain"
    GATE = "gate"
    DOOR = "door"
    WINDOW = "window"
    TURRET = "turret"
    LASER = "laser"
    STROBE = "strobe"
    SPEAKER = "speaker"
    PUMP = "pump"
    COMPRESSOR = "compressor"

@dataclass
class ActuatorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
    actuator_id: str
    actuator_type: ActuatorType
    location: str
    zone: str
    description: str
    enabled: bool = True
    parameters: Dict[str, Any] = None
    safety_limits: Dict[str, Any] = None

@dataclass
class ActuatorStatus:
    """–°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
    actuator_id: str
    state: str
    value: Any = None
    timestamp: datetime = None
    error: str = None

class ActuatorManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤ —É–º–Ω–æ–≥–æ –¥–æ–º–∞"""
    
    def __init__(self):
        self.actuators: Dict[str, ActuatorConfig] = {}
        self.status: Dict[str, ActuatorStatus] = {}
        self.logger = logger
        
        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤
        self.status_subscribers: List[callable] = []
        self.command_subscribers: List[callable] = []
        
    async def add_actuator(self, config: ActuatorConfig):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        self.actuators[config.actuator_id] = config
        self.status[config.actuator_id] = ActuatorStatus(
            actuator_id=config.actuator_id,
            state="unknown",
            timestamp=datetime.now()
        )
        
        self.logger.info(f"‚úÖ Added actuator: {config.actuator_id} ({config.actuator_type.value})")
        
    async def remove_actuator(self, actuator_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        if actuator_id in self.actuators:
            del self.actuators[actuator_id]
            del self.status[actuator_id]
            self.logger.info(f"üóëÔ∏è Removed actuator: {actuator_id}")
    
    async def send_command(self, actuator_id: str, command: str, parameters: Dict[str, Any] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç—É–∞—Ç–æ—Ä—É"""
        if actuator_id not in self.actuators:
            self.logger.warning(f"‚ö†Ô∏è Unknown actuator: {actuator_id}")
            return False
        
        actuator_config = self.actuators[actuator_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not await self._check_safety_limits(actuator_config, command, parameters):
            self.logger.error(f"‚ùå Safety limit exceeded for actuator: {actuator_id}")
            return False
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        try:
            result = await self._execute_command(actuator_config, command, parameters)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await self._update_status(actuator_id, "active" if result else "error")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            await self._notify_command_subscribers(actuator_id, command, parameters, result)
            
            self.logger.info(f"üì§ Command sent to {actuator_id}: {command}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Command execution error for {actuator_id}: {e}")
            await self._update_status(actuator_id, "error", error=str(e))
            return False
    
    async def _check_safety_limits(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if not config.safety_limits:
            return True
        
        limits = config.safety_limits
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        if "allowed_commands" in limits and command not in limits["allowed_commands"]:
            self.logger.warning(f"‚ö†Ô∏è Command {command} not allowed for {config.actuator_id}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if parameters and "max_values" in limits:
            for param, value in parameters.items():
                if param in limits["max_values"]:
                    max_value = limits["max_values"][param]
                    if value > max_value:
                        self.logger.warning(f"‚ö†Ô∏è Parameter {param}={value} exceeds max {max_value}")
                        return False
        
        return True
    
    async def _execute_command(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        actuator_type = config.actuator_type
        
        try:
            if actuator_type == ActuatorType.LIGHT:
                return await self._execute_light_command(config, command, parameters)
            elif actuator_type == ActuatorType.LOCK:
                return await self._execute_lock_command(config, command, parameters)
            elif actuator_type == ActuatorType.SIREN:
                return await self._execute_siren_command(config, command, parameters)
            elif actuator_type == ActuatorType.CAMERA:
                return await self._execute_camera_command(config, command, parameters)
            elif actuator_type == ActuatorType.VALVE:
                return await self._execute_valve_command(config, command, parameters)
            elif actuator_type == ActuatorType.MOTOR:
                return await self._execute_motor_command(config, command, parameters)
            elif actuator_type == ActuatorType.TURRET:
                return await self._execute_turret_command(config, command, parameters)
            else:
                # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
                return await self._execute_generic_command(config, command, parameters)
                
        except Exception as e:
            self.logger.error(f"‚ùå Command execution error: {e}")
            return False
    
    async def _execute_light_command(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å–≤–µ—â–µ–Ω–∏—è"""
        if command == "turn_on":
            # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
            return True
        elif command == "turn_off":
            # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
            return True
        elif command == "set_brightness":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
            brightness = parameters.get("brightness", 100)
            return 0 <= brightness <= 100
        elif command == "set_color":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞
            return True
        else:
            return False
    
    async def _execute_lock_command(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–º–∫–∞"""
        if command == "lock":
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            return True
        elif command == "unlock":
            # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            return True
        elif command == "toggle":
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            return True
        else:
            return False
    
    async def _execute_siren_command(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–∏—Ä–µ–Ω—ã"""
        if command == "activate":
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏—Ä–µ–Ω—ã
            volume = parameters.get("volume", "medium")
            return volume in ["low", "medium", "high"]
        elif command == "deactivate":
            # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏—Ä–µ–Ω—ã
            return True
        elif command == "set_pattern":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            pattern = parameters.get("pattern", "continuous")
            return pattern in ["continuous", "intermittent", "emergency"]
        else:
            return False
    
    async def _execute_camera_command(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–º–µ—Ä—ã"""
        if command == "pan":
            # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            angle = parameters.get("angle", 0)
            return -180 <= angle <= 180
        elif command == "tilt":
            # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            angle = parameters.get("angle", 0)
            return -90 <= angle <= 90
        elif command == "zoom":
            # –ó—É–º
            level = parameters.get("level", 1)
            return 1 <= level <= 10
        elif command == "record":
            # –ó–∞–ø–∏—Å—å
            return True
        else:
            return False
    
    async def _execute_valve_command(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–ª–∞–ø–∞–Ω–∞"""
        if command == "open":
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–ø–∞–Ω–∞
            return True
        elif command == "close":
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–ø–∞–Ω–∞
            return True
        elif command == "set_position":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
            position = parameters.get("position", 0)
            return 0 <= position <= 100
        else:
            return False
    
    async def _execute_motor_command(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ—Ç–æ—Ä–∞"""
        if command == "start":
            # –ó–∞–ø—É—Å–∫ –º–æ—Ç–æ—Ä–∞
            return True
        elif command == "stop":
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–∞
            return True
        elif command == "set_speed":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
            speed = parameters.get("speed", 0)
            return 0 <= speed <= 100
        else:
            return False
    
    async def _execute_turret_command(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–µ–ª–∏"""
        if command == "aim":
            # –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª—å
            x = parameters.get("x", 0)
            y = parameters.get("y", 0)
            return -180 <= x <= 180 and -90 <= y <= 90
        elif command == "track":
            # –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ —Ü–µ–ª—å—é
            target_id = parameters.get("target_id")
            return target_id is not None
        elif command == "fire":
            # –°—Ç—Ä–µ–ª—å–±–∞ (–∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ)
            return True
        else:
            return False
    
    async def _execute_generic_command(self, config: ActuatorConfig, command: str, parameters: Dict[str, Any]) -> bool:
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"""
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤
        return True
    
    async def _update_status(self, actuator_id: str, state: str, value: Any = None, error: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        self.status[actuator_id] = ActuatorStatus(
            actuator_id=actuator_id,
            state=state,
            value=value,
            timestamp=datetime.now(),
            error=error
        )
        
        await self._notify_status_subscribers(actuator_id, self.status[actuator_id])
    
    async def _notify_status_subscribers(self, actuator_id: str, status: ActuatorStatus):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ —Å—Ç–∞—Ç—É—Å–µ"""
        for subscriber in self.status_subscribers:
            try:
                await subscriber(actuator_id, status)
            except Exception as e:
                self.logger.error(f"‚ùå Status subscriber error: {e}")
    
    async def _notify_command_subscribers(self, actuator_id: str, command: str, parameters: Dict, result: bool):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –∫–æ–º–∞–Ω–¥–∞—Ö"""
        for subscriber in self.command_subscribers:
            try:
                await subscriber(actuator_id, command, parameters, result)
            except Exception as e:
                self.logger.error(f"‚ùå Command subscriber error: {e}")
    
    def get_actuator_config(self, actuator_id: str) -> Optional[ActuatorConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        return self.actuators.get(actuator_id)
    
    def get_actuator_status(self, actuator_id: str) -> Optional[ActuatorStatus]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        return self.status.get(actuator_id)
    
    def get_actuators_by_type(self, actuator_type: ActuatorType) -> List[ActuatorConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤ –ø–æ —Ç–∏–ø—É"""
        return [config for config in self.actuators.values() if config.actuator_type == actuator_type]
    
    def get_actuators_by_zone(self, zone: str) -> List[ActuatorConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤ –ø–æ –∑–æ–Ω–µ"""
        return [config for config in self.actuators.values() if config.zone == zone]
    
    def get_actuators_by_location(self, location: str) -> List[ActuatorConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é"""
        return [config for config in self.actuators.values() if config.location == location]
    
    def subscribe_to_status(self, callback: callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤"""
        self.status_subscribers.append(callback)
    
    def subscribe_to_commands(self, callback: callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤"""
        self.command_subscribers.append(callback)
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤"""
        total_actuators = len(self.actuators)
        active_actuators = len([a for a in self.actuators.values() if a.enabled])
        error_actuators = len([s for s in self.status.values() if s.state == "error"])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç—É–∞—Ç–æ—Ä–æ–≤
        type_stats = {}
        for actuator_type in ActuatorType:
            count = len(self.get_actuators_by_type(actuator_type))
            if count > 0:
                type_stats[actuator_type.value] = count
        
        return {
            "total_actuators": total_actuators,
            "active_actuators": active_actuators,
            "error_actuators": error_actuators,
            "actuator_types": type_stats,
            "timestamp": datetime.now().isoformat()
        }
    
    async def enable_actuator(self, actuator_id: str):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        if actuator_id in self.actuators:
            self.actuators[actuator_id].enabled = True
            self.logger.info(f"‚úÖ Enabled actuator: {actuator_id}")
    
    async def disable_actuator(self, actuator_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        if actuator_id in self.actuators:
            self.actuators[actuator_id].enabled = False
            self.logger.info(f"‚ùå Disabled actuator: {actuator_id}")
    
    def export_config(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return {
            "actuators": {
                actuator_id: {
                    "actuator_type": config.actuator_type.value,
                    "location": config.location,
                    "zone": config.zone,
                    "description": config.description,
                    "enabled": config.enabled,
                    "parameters": config.parameters,
                    "safety_limits": config.safety_limits
                }
                for actuator_id, config in self.actuators.items()
            }
        }
    
    async def import_config(self, config_data: Dict[str, Any]):
        """–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        actuators_data = config_data.get("actuators", {})
        
        for actuator_id, actuator_config in actuators_data.items():
            config = ActuatorConfig(
                actuator_id=actuator_id,
                actuator_type=ActuatorType(actuator_config["actuator_type"]),
                location=actuator_config["location"],
                zone=actuator_config["zone"],
                description=actuator_config["description"],
                enabled=actuator_config.get("enabled", True),
                parameters=actuator_config.get("parameters"),
                safety_limits=actuator_config.get("safety_limits")
            )
            
            await self.add_actuator(config)
        
        self.logger.info(f"üì• Imported {len(actuators_data)} actuators") 