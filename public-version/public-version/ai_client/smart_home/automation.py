"""
Smart Home Automation Engine
–î–≤–∏–∂–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ –¥–æ–º–∞
"""

import asyncio
import json
import logging
from typing import Dict, List, Optional, Any, Callable
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from enum import Enum

logger = logging.getLogger(__name__)

class AutomationTrigger(Enum):
    """–¢–∏–ø—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    SENSOR = "sensor"
    TIME = "time"
    EVENT = "event"
    CONDITION = "condition"
    MANUAL = "manual"

class AutomationCondition(Enum):
    """–¢–∏–ø—ã —É—Å–ª–æ–≤–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    EQUALS = "equals"
    GREATER_THAN = "greater_than"
    LESS_THAN = "less_than"
    BETWEEN = "between"
    CONTAINS = "contains"
    EXISTS = "exists"
    NOT_EXISTS = "not_exists"

@dataclass
class AutomationRule:
    """–ü—Ä–∞–≤–∏–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    rule_id: str
    name: str
    description: str
    enabled: bool = True
    trigger: AutomationTrigger = AutomationTrigger.SENSOR
    conditions: List[Dict] = None
    actions: List[Dict] = None
    schedule: Dict = None
    priority: int = 1
    created_at: datetime = None
    last_executed: datetime = None

class AutomationEngine:
    """–î–≤–∏–∂–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ –¥–æ–º–∞"""
    
    def __init__(self):
        self.rules: Dict[str, AutomationRule] = {}
        self.logger = logger
        
        # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        self.execution_subscribers: List[Callable] = []
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.execution_context: Dict[str, Any] = {}
        
    async def add_rule(self, rule: AutomationRule):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        if rule.created_at is None:
            rule.created_at = datetime.now()
        
        self.rules[rule.rule_id] = rule
        self.logger.info(f"‚úÖ Added automation rule: {rule.name}")
    
    async def remove_rule(self, rule_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        if rule_id in self.rules:
            del self.rules[rule_id]
            self.logger.info(f"üóëÔ∏è Removed automation rule: {rule_id}")
    
    async def enable_rule(self, rule_id: str):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"""
        if rule_id in self.rules:
            self.rules[rule_id].enabled = True
            self.logger.info(f"‚úÖ Enabled automation rule: {rule_id}")
    
    async def disable_rule(self, rule_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"""
        if rule_id in self.rules:
            self.rules[rule_id].enabled = False
            self.logger.info(f"‚ùå Disabled automation rule: {rule_id}")
    
    async def evaluate_rule(self, rule: AutomationRule, context: Dict[str, Any]) -> bool:
        """–û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        if not rule.enabled:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        if not await self._check_trigger(rule, context):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
        if rule.conditions and not await self._evaluate_conditions(rule.conditions, context):
            return False
        
        return True
    
    async def _check_trigger(self, rule: AutomationRule, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        trigger = rule.trigger
        
        if trigger == AutomationTrigger.SENSOR:
            return await self._check_sensor_trigger(rule, context)
        elif trigger == AutomationTrigger.TIME:
            return await self._check_time_trigger(rule, context)
        elif trigger == AutomationTrigger.EVENT:
            return await self._check_event_trigger(rule, context)
        elif trigger == AutomationTrigger.CONDITION:
            return await self._check_condition_trigger(rule, context)
        elif trigger == AutomationTrigger.MANUAL:
            return await self._check_manual_trigger(rule, context)
        
        return False
    
    async def _check_sensor_trigger(self, rule: AutomationRule, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–µ–Ω—Å–æ—Ä–∞"""
        sensor_data = context.get("sensor_data")
        if not sensor_data:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID —Å–µ–Ω—Å–æ—Ä–∞
        if "sensor_id" in context and context["sensor_id"] == sensor_data.get("sensor_id"):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∏–ø—É —Å–µ–Ω—Å–æ—Ä–∞
        if "sensor_type" in context and context["sensor_type"] == sensor_data.get("sensor_type"):
            return True
        
        return False
    
    async def _check_time_trigger(self, rule: AutomationRule, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        schedule = rule.schedule
        if not schedule:
            return False
        
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
        if "time" in schedule:
            time_str = schedule["time"]
            try:
                trigger_time = datetime.strptime(time_str, "%H:%M").time()
                current_time_only = current_time.time()
                
                # –î–æ–ø—É—Å–∫ –≤ 1 –º–∏–Ω—É—Ç—É
                time_diff = abs((current_time_only.hour * 60 + current_time_only.minute) - 
                               (trigger_time.hour * 60 + trigger_time.minute))
                return time_diff <= 1
            except ValueError:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        if "days" in schedule:
            current_day = current_time.strftime("%A").lower()
            if current_day not in schedule["days"]:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if "interval" in schedule:
            interval_minutes = schedule["interval"]
            last_executed = rule.last_executed
            if last_executed:
                time_since_last = (current_time - last_executed).total_seconds() / 60
                return time_since_last >= interval_minutes
        
        return True
    
    async def _check_event_trigger(self, rule: AutomationRule, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è"""
        event_type = context.get("event_type")
        if not event_type:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if "event_types" in context:
            return event_type in context["event_types"]
        
        return True
    
    async def _check_condition_trigger(self, rule: AutomationRule, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —É—Å–ª–æ–≤–∏—è"""
        return await self._evaluate_conditions(rule.conditions or [], context)
    
    async def _check_manual_trigger(self, rule: AutomationRule, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        manual_trigger = context.get("manual_trigger")
        return manual_trigger == rule.rule_id
    
    async def _evaluate_conditions(self, conditions: List[Dict], context: Dict[str, Any]) -> bool:
        """–û—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏–π"""
        if not conditions:
            return True
        
        for condition in conditions:
            if not await self._evaluate_single_condition(condition, context):
                return False
        
        return True
    
    async def _evaluate_single_condition(self, condition: Dict, context: Dict[str, Any]) -> bool:
        """–û—Ü–µ–Ω–∫–∞ –æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è"""
        condition_type = condition.get("type")
        field = condition.get("field")
        value = condition.get("value")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_value = self._get_context_value(field, context)
        
        if condition_type == AutomationCondition.EQUALS.value:
            return context_value == value
        elif condition_type == AutomationCondition.GREATER_THAN.value:
            return context_value > value
        elif condition_type == AutomationCondition.LESS_THAN.value:
            return context_value < value
        elif condition_type == AutomationCondition.BETWEEN.value:
            min_val = value.get("min")
            max_val = value.get("max")
            return min_val <= context_value <= max_val
        elif condition_type == AutomationCondition.CONTAINS.value:
            return value in str(context_value)
        elif condition_type == AutomationCondition.EXISTS.value:
            return context_value is not None and context_value != ""
        elif condition_type == AutomationCondition.NOT_EXISTS.value:
            return context_value is None or context_value == ""
        
        return False
    
    def _get_context_value(self, field: str, context: Dict[str, Any]) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if "." in field:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "sensor_data.value")
            parts = field.split(".")
            value = context
            for part in parts:
                if isinstance(value, dict) and part in value:
                    value = value[part]
                else:
                    return None
            return value
        else:
            return context.get(field)
    
    async def execute_rule(self, rule: AutomationRule, context: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            self.logger.info(f"üöÄ Executing automation rule: {rule.name}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            rule.last_executed = datetime.now()
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            if rule.actions:
                for action in rule.actions:
                    await self._execute_action(action, context)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            await self._notify_execution_subscribers(rule, context, True)
            
            self.logger.info(f"‚úÖ Automation rule executed: {rule.name}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Automation rule execution error: {e}")
            await self._notify_execution_subscribers(rule, context, False, str(e))
    
    async def _execute_action(self, action: Dict, context: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        action_type = action.get("type")
        
        if action_type == "actuator_command":
            await self._execute_actuator_action(action, context)
        elif action_type == "notification":
            await self._execute_notification_action(action, context)
        elif action_type == "script":
            await self._execute_script_action(action, context)
        elif action_type == "scene":
            await self._execute_scene_action(action, context)
        else:
            self.logger.warning(f"‚ö†Ô∏è Unknown action type: {action_type}")
    
    async def _execute_actuator_action(self, action: Dict, context: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–∫—Ç—É–∞—Ç–æ—Ä–∞"""
        actuator_id = action.get("actuator_id")
        command = action.get("command")
        parameters = action.get("parameters", {})
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ActuatorManager
        self.logger.info(f"üì§ Actuator action: {actuator_id} -> {command}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        await asyncio.sleep(0.1)
    
    async def _execute_notification_action(self, action: Dict, context: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        message = action.get("message", "")
        notification_type = action.get("notification_type", "info")
        
        self.logger.info(f"üì± Notification ({notification_type}): {message}")
    
    async def _execute_script_action(self, action: Dict, context: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        script_path = action.get("script_path")
        parameters = action.get("parameters", {})
        
        self.logger.info(f"üìú Script action: {script_path}")
    
    async def _execute_scene_action(self, action: Dict, context: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã"""
        scene_id = action.get("scene_id")
        
        self.logger.info(f"üé¨ Scene action: {scene_id}")
    
    async def _notify_execution_subscribers(self, rule: AutomationRule, context: Dict[str, Any], success: bool, error: str = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
        execution_data = {
            "rule_id": rule.rule_id,
            "rule_name": rule.name,
            "success": success,
            "error": error,
            "timestamp": datetime.now().isoformat(),
            "context": context
        }
        
        for subscriber in self.execution_subscribers:
            try:
                await subscriber(execution_data)
            except Exception as e:
                self.logger.error(f"‚ùå Execution subscriber error: {e}")
    
    async def process_event(self, event_type: str, event_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        context = {
            "event_type": event_type,
            "event_data": event_data,
            **event_data
        }
        
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∞–≤–∏–ª
        matching_rules = []
        
        for rule in self.rules.values():
            if await self.evaluate_rule(rule, context):
                matching_rules.append(rule)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        matching_rules.sort(key=lambda r: r.priority, reverse=True)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
        for rule in matching_rules:
            await self.execute_rule(rule, context)
    
    def subscribe_to_executions(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"""
        self.execution_subscribers.append(callback)
    
    def get_rule(self, rule_id: str) -> Optional[AutomationRule]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ ID"""
        return self.rules.get(rule_id)
    
    def get_rules_by_trigger(self, trigger: AutomationTrigger) -> List[AutomationRule]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–æ —Ç–∏–ø—É —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        return [rule for rule in self.rules.values() if rule.trigger == trigger]
    
    def get_enabled_rules(self) -> List[AutomationRule]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª"""
        return [rule for rule in self.rules.values() if rule.enabled]
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        total_rules = len(self.rules)
        enabled_rules = len(self.get_enabled_rules())
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º
        trigger_stats = {}
        for trigger in AutomationTrigger:
            count = len(self.get_rules_by_trigger(trigger))
            if count > 0:
                trigger_stats[trigger.value] = count
        
        return {
            "total_rules": total_rules,
            "enabled_rules": enabled_rules,
            "trigger_types": trigger_stats,
            "timestamp": datetime.now().isoformat()
        }
    
    def export_config(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return {
            "rules": {
                rule_id: {
                    "name": rule.name,
                    "description": rule.description,
                    "enabled": rule.enabled,
                    "trigger": rule.trigger.value,
                    "conditions": rule.conditions,
                    "actions": rule.actions,
                    "schedule": rule.schedule,
                    "priority": rule.priority,
                    "created_at": rule.created_at.isoformat() if rule.created_at else None,
                    "last_executed": rule.last_executed.isoformat() if rule.last_executed else None
                }
                for rule_id, rule in self.rules.items()
            }
        }
    
    async def import_config(self, config_data: Dict[str, Any]):
        """–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        rules_data = config_data.get("rules", {})
        
        for rule_id, rule_config in rules_data.items():
            rule = AutomationRule(
                rule_id=rule_id,
                name=rule_config["name"],
                description=rule_config["description"],
                enabled=rule_config.get("enabled", True),
                trigger=AutomationTrigger(rule_config["trigger"]),
                conditions=rule_config.get("conditions"),
                actions=rule_config.get("actions"),
                schedule=rule_config.get("schedule"),
                priority=rule_config.get("priority", 1),
                created_at=datetime.fromisoformat(rule_config["created_at"]) if rule_config.get("created_at") else None,
                last_executed=datetime.fromisoformat(rule_config["last_executed"]) if rule_config.get("last_executed") else None
            )
            
            await self.add_rule(rule)
        
        self.logger.info(f"üì• Imported {len(rules_data)} automation rules") 