#!/usr/bin/env python3
"""
Test script for multi-step agency capabilities
"""
import asyncio
import aiohttp
import base64
import json

async def test_multi_step_agency():
    """Test multi-step agency with complex operations"""
    username = "meranda"
    password = "musser"
    credentials = base64.b64encode(f"{username}:{password}".encode()).decode()
    
    test_messages = [
        "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤–æ–π —Å–µ–≥–æ–¥–Ω—è, –Ω–æ —Ö–æ—á—É –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
        "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ, –∏ —è —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π",
        "–ü—Ä–æ–≤–µ—Ä—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å"
    ]
    
    print(f"üß™ Testing multi-step agency for user: {username}")
    print("=" * 60)
    
    async with aiohttp.ClientSession() as session:
        for i, message in enumerate(test_messages, 1):
            print(f"\nüìù Test {i}: '{message}'")
            print("-" * 40)
            
            data = aiohttp.FormData()
            data.add_field('message', message)
            
            async with session.post(
                'http://localhost:8000/api/chat/stream',
                data=data,
                headers={
                    'Authorization': f'Basic {credentials}',
                    'Accept': 'text/event-stream',
                    'Cache-Control': 'no-cache'
                }
            ) as response:
                if response.status == 200:
                    print("‚úÖ Request successful")
                    print("üìÑ Response chunks:")
                    
                    async for line in response.content:
                        line_str = line.decode('utf-8').strip()
                        if line_str.startswith('data: '):
                            try:
                                data = json.loads(line_str[6:])
                                if data['type'] == 'chunk':
                                    print(f"   {data['content']}", end='')
                                elif data['type'] == 'complete':
                                    print("\n‚úÖ Response completed")
                                    break
                            except json.JSONDecodeError:
                                pass
                    
                    await asyncio.sleep(1) # Give time for processing
                    
                    # Check what files were created/modified
                    print("\nüìÅ Checking file system changes:")
                    
                    # Check profile
                    profile_response = await session.get(
                        'http://localhost:8000/api/profile',
                        headers={'Authorization': f'Basic {credentials}'}
                    )
                    
                    if profile_response.status == 200:
                        profile = await profile_response.json()
                        current_feeling = profile.get('current_feeling', 'Not set')
                        emotional_history = profile.get('emotional_history', [])
                        emotional_trends = profile.get('emotional_trends', {})
                        
                        print(f"üí≠ Current feeling: {current_feeling}")
                        print(f"üìä Emotional trend: {emotional_trends.get('trend', 'Unknown')}")
                        print(f"üìà Total emotion entries: {emotional_trends.get('total_entries', 0)}")
                        
                        if emotional_history:
                            latest = emotional_history[-1]
                            print(f"üïí Latest emotion: {latest.get('feeling', 'Unknown')} at {latest.get('time', 'Unknown')}")
                            print(f"üìù Context: {latest.get('context', 'No context')}")
                            
                    else:
                        print(f"‚ùå Failed to get profile: {profile_response.status}")
                        
                else:
                    print(f"‚ùå Request failed: {response.status}")

if __name__ == "__main__":
    asyncio.run(test_multi_step_agency()) 