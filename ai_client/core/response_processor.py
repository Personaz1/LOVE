"""
Response Processor - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏
–†–∞–∑–¥–µ–ª—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ tool calls –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
"""

import re
import logging
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class ToolCall:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è tool call"""
    function_name: str
    arguments: Dict[str, Any]
    original_text: str
    start_pos: int
    end_pos: int

@dataclass
class ProcessedResponse:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    original_text: str
    tool_calls: List[ToolCall]
    formatted_text: str
    tool_results: List[Dict[str, Any]]

class ToolExtractor:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç tool calls –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ tool calls
        self.tool_patterns = [
            r'print\s*\(\s*tool_code\.([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\s*([^)]+)\s*\)\s*\)',
            r'tool_code\.([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\s*([^)]+)\s*\)',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è tool_code –∏–∑ print
        self.print_tool_pattern = r'print\s*\(\s*tool_code\.([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\s*([^)]+)\s*\)\s*\)'
    
    def extract_tool_calls(self, text: str) -> List[ToolCall]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç tool calls –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        tool_calls = []
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º print(tool_code.function()) –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        print_matches = re.finditer(self.print_tool_pattern, text, re.MULTILINE | re.DOTALL)
        
        for match in print_matches:
            try:
                function_name = match.group(1)
                args_str = match.group(2)
                
                # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                arguments = self._parse_arguments(args_str)
                
                tool_call = ToolCall(
                    function_name=function_name,
                    arguments=arguments,
                    original_text=match.group(0),  # print(tool_code.function())
                    start_pos=match.start(),
                    end_pos=match.end()
                )
                
                tool_calls.append(tool_call)
                logger.info(f"üîß TOOL EXTRACTOR: Found print tool call: {function_name}({arguments})")
                
            except Exception as e:
                logger.error(f"‚ùå TOOL EXTRACTOR: Error parsing print tool call: {e}")
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ tool_code.function() –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ù–û –ò–°–ö–õ–Æ–ß–ê–ï–ú –£–ñ–ï –ù–ê–ô–î–ï–ù–ù–´–ï)
        for pattern in self.tool_patterns[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º print –ø–∞—Ç—Ç–µ—Ä–Ω
            matches = re.finditer(pattern, text, re.MULTILINE | re.DOTALL)
            
            for match in matches:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç tool call –≤ print –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
                already_found = False
                for existing_call in tool_calls:
                    if (match.start() >= existing_call.start_pos and 
                        match.end() <= existing_call.end_pos):
                        already_found = True
                        break
                
                if already_found:
                    continue
                
                try:
                    function_name = match.group(1)
                    args_str = match.group(2)
                    
                    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                    arguments = self._parse_arguments(args_str)
                    
                    tool_call = ToolCall(
                        function_name=function_name,
                        arguments=arguments,
                        original_text=match.group(0),
                        start_pos=match.start(),
                        end_pos=match.end()
                    )
                    
                    tool_calls.append(tool_call)
                    logger.info(f"üîß TOOL EXTRACTOR: Found direct tool call: {function_name}({arguments})")
                    
                except Exception as e:
                    logger.error(f"‚ùå TOOL EXTRACTOR: Error parsing direct tool call: {e}")
        
        return tool_calls
    
    def _parse_arguments(self, args_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã tool call"""
        arguments = {}
        
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        args_str = args_str.strip()
        
        # –ò—â–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: name=value
        named_pattern = r'([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*["\']([^"\']*)["\']'
        named_matches = re.findall(named_pattern, args_str)
        
        for name, value in named_matches:
            arguments[name] = value
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –±–µ—Ä–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ
        if not arguments:
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–≤—ã—á–∫–∏
            parts = re.split(r',\s*(?=(?:[^"]*"[^"]*")*[^"]*$)', args_str)
            for i, part in enumerate(parts):
                part = part.strip().strip('"\'')
                if part:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    if re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', part):
                        arguments[f"arg_{i}"] = part
                    else:
                        arguments[f"arg_{i}"] = part
        
        return arguments

class ToolExecutor:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç tool calls"""
    
    def __init__(self, ai_client):
        self.ai_client = ai_client
    
    async def execute_tool_call(self, tool_call: ToolCall, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω tool call"""
        try:
            logger.info(f"üîß TOOL EXECUTOR: Executing {tool_call.function_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ai_client
            tool_function = getattr(self.ai_client, tool_call.function_name, None)
            if not tool_function:
                raise Exception(f"Tool function {tool_call.function_name} not found")
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            resolved_arguments = {}
            for key, value in tool_call.arguments.items():
                if isinstance(value, str) and value == 'user_profile' and context:
                    # –ü–æ–ª—É—á–∞–µ–º user_profile –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    resolved_arguments[key] = context.get('user_profile')
                else:
                    resolved_arguments[key] = value
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            result = await tool_function(**resolved_arguments)
            
            return {
                'success': True,
                'function': tool_call.function_name,
                'arguments': tool_call.arguments,
                'result': result,
                'original_text': tool_call.original_text
            }
            
        except Exception as e:
            logger.error(f"‚ùå TOOL EXECUTOR: Error executing {tool_call.function_name}: {e}")
            return {
                'success': False,
                'function': tool_call.function_name,
                'arguments': tool_call.arguments,
                'error': str(e),
                'original_text': tool_call.original_text
            }

class ResponseFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ (–ü–û–°–õ–ï –ø–∞—Ä—Å–∏–Ω–≥–∞)"""
    
    def format_for_chat(self, text: str, tool_results: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ tools"""
        formatted_text = text
        
        # –ó–∞–º–µ–Ω—è–µ–º tool calls –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in tool_results:
            if result['success']:
                replacement = f"\n\n**–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n{result['result']}\n\n"
            else:
                replacement = f"\n\n**–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n{result['error']}\n\n"
            
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π tool call –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_text = formatted_text.replace(result['original_text'], replacement)
        
        return formatted_text

class ResponseProcessor:
    """–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, ai_client):
        self.tool_extractor = ToolExtractor()
        self.tool_executor = ToolExecutor(ai_client)
        self.response_formatter = ResponseFormatter()
        self.ai_client = ai_client  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
    
    async def process_complete_response(self, text: str, context: Dict[str, Any] = None) -> ProcessedResponse:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏"""
        logger.info(f"üîß RESPONSE PROCESSOR: Processing response ({len(text)} chars)")
        
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º tool calls –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        tool_calls = self.tool_extractor.extract_tool_calls(text)
        logger.info(f"üîß RESPONSE PROCESSOR: Found {len(tool_calls)} tool calls")
        
        # 2. –í—ã–ø–æ–ª–Ω—è–µ–º tool calls —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        tool_results = []
        for tool_call in tool_calls:
            result = await self.tool_executor.execute_tool_call(tool_call, context)
            tool_results.append(result)
        
        # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —á–∞—Ç–∞
        formatted_text = self.response_formatter.format_for_chat(text, tool_results)
        
        return ProcessedResponse(
            original_text=text,
            tool_calls=tool_calls,
            formatted_text=formatted_text,
            tool_results=tool_results
        )
    
    async def process_streaming_response(self, text_stream):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏"""
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        full_text = ""
        
        async for chunk in text_stream:
            full_text += chunk
            yield chunk
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool calls –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        processed = await self.process_complete_response(full_text)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã tool calls, –∑–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        if processed.tool_results:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            yield processed.formatted_text 