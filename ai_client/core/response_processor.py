"""
Response Processor - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏
–†–∞–∑–¥–µ–ª—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ tool calls –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
"""

import re
import logging
from typing import List, Dict, Any
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class ToolCall:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è tool call"""
    function_name: str
    arguments: Dict[str, Any]
    original_text: str
    start_pos: int
    end_pos: int

@dataclass
class ProcessedResponse:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    original_text: str
    tool_calls: List[ToolCall]
    formatted_text: str
    tool_results: List[Dict[str, Any]]

class ToolExtractor:
    """–ü—Ä–æ—Å—Ç–æ–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä tool calls"""
    
    def __init__(self):
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ tool calls
        self.tool_patterns = [
            r'SystemTools\.([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\s*(.*?)\s*\)',
            r'VisionTools\.([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\s*(.*?)\s*\)',
        ]
    
    def extract_tool_calls(self, text: str) -> List[ToolCall]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç tool calls –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        tool_calls = []
        
        for pattern in self.tool_patterns:
            matches = re.finditer(pattern, text, re.MULTILINE | re.DOTALL)
            
            for match in matches:
                try:
                    function_name = match.group(1)
                    args_str = match.group(2)
                    
                    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                    arguments = self._parse_arguments(args_str)
                    
                    tool_call = ToolCall(
                        function_name=function_name,
                        arguments=arguments,
                        original_text=match.group(0),
                        start_pos=match.start(),
                        end_pos=match.end()
                    )
                    
                    tool_calls.append(tool_call)
                    logger.info(f"üîß TOOL EXTRACTOR: Found tool call: {function_name}({arguments})")
                    
                except Exception as e:
                    logger.error(f"‚ùå TOOL EXTRACTOR: Error parsing tool call: {e}")
        
        return tool_calls
    
    def _parse_arguments(self, args_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã tool call"""
        arguments = {}
        args_str = args_str.strip()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if not args_str:
            return arguments
        
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
        first_quote = args_str.find('"')
        if first_quote != -1:
            end_quote = args_str.find('"', first_quote + 1)
            if end_quote != -1:
                file_path = args_str[first_quote + 1:end_quote]
                arguments["arg_0"] = file_path
                
                # –ò—â–µ–º –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
                remaining = args_str[end_quote + 1:].strip()
                if remaining.startswith(','):
                    remaining = remaining[1:].strip()
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç
                if remaining.startswith('"'):
                    # –ë–µ—Ä–µ–º –≤—Å–µ —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
                    content = remaining[1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞–≤—ã—á–∫—É
                    arguments["arg_1"] = content
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–≤—ã—á–∫–∏, –±–µ—Ä–µ–º –≤—Å–µ —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
                    arguments["arg_1"] = remaining
        
        return arguments

class ToolExecutor:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç tool calls"""
    
    def __init__(self, ai_client):
        self.ai_client = ai_client
    
    def execute_tool_call(self, tool_call: ToolCall, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç tool call"""
        try:
            function_name = tool_call.function_name
            arguments = tool_call.arguments
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ai_client
            if hasattr(self.ai_client, 'system_tools'):
                tool_instance = self.ai_client.system_tools
            else:
                tool_instance = self.ai_client
            
            if hasattr(tool_instance, function_name):
                func = getattr(tool_instance, function_name)
                
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                if function_name in ['create_file', 'append_to_file']:
                    # –î–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    file_path = arguments.get('arg_0', '')
                    content = arguments.get('arg_1', '')
                    
                    if function_name == 'create_file':
                        result = func(file_path, content)
                    else:  # append_to_file
                        result = func(file_path, content)
                    
                    return {
                        'success': True,
                        'result': result,
                        'function': function_name,
                        'file_path': file_path
                    }
                elif function_name == 'read_file':
                    # –î–ª—è read_file - —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    file_path = arguments.get('arg_0', '')
                    result = func(file_path)
                    return {
                        'success': True,
                        'result': result,
                        'function': function_name,
                        'file_path': file_path
                    }
                elif function_name == 'list_files':
                    # –î–ª—è list_files - —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                    directory = arguments.get('arg_0', '.')
                    result = func(directory)
                    return {
                        'success': True,
                        'result': result,
                        'function': function_name,
                        'directory': directory
                    }
                elif function_name == 'analyze_file':
                    # –î–ª—è analyze_file - file_path –∏ user_context
                    if arguments:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–∞–º arg_0, arg_1, etc.
                        sorted_args = []
                        i = 0
                        while f'arg_{i}' in arguments:
                            sorted_args.append(arguments[f'arg_{i}'])
                            i += 1
                        result = func(*sorted_args)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                        return {
                            'success': False,
                            'error': 'analyze_file requires at least one argument (file_path)'
                        }
                    return {
                        'success': True,
                        'result': result,
                        'function': function_name
                    }
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π - –ø–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ
                    if arguments:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–∞–º arg_0, arg_1, etc.
                        sorted_args = []
                        i = 0
                        while f'arg_{i}' in arguments:
                            sorted_args.append(arguments[f'arg_{i}'])
                            i += 1
                        result = func(*sorted_args)
                    else:
                        result = func()
                    return {
                        'success': True,
                        'result': result,
                        'function': function_name
                    }
            else:
                return {
                    'success': False,
                    'error': f'Function {function_name} not found'
                }
                
        except Exception as e:
            logger.error(f"‚ùå TOOL EXECUTOR: Error executing {tool_call.function_name}: {e}")
            return {
                'success': False,
                'error': str(e)
            }

class ResponseFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –¥–ª—è —á–∞—Ç–∞"""
    
    def format_for_chat(self, text: str, tool_results: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
        formatted_text = text
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for result in tool_results:
            if result.get('success'):
                formatted_text += f"\n\n‚úÖ {result.get('result', '')}"
            else:
                formatted_text += f"\n\n‚ùå Error: {result.get('error', '')}"
        
        return formatted_text

class ResponseProcessor:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã AI"""
    
    def __init__(self, ai_client):
        self.ai_client = ai_client
        self.tool_extractor = ToolExtractor()
        self.tool_executor = ToolExecutor(ai_client)
        self.response_formatter = ResponseFormatter()
    
    async def process_complete_response(self, text: str, context: Dict[str, Any] = None) -> ProcessedResponse:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º tool calls
        tool_calls = self.tool_extractor.extract_tool_calls(text)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º tool calls
        tool_results = []
        for tool_call in tool_calls:
            result = self.tool_executor.execute_tool_call(tool_call, context)
            tool_results.append(result)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_text = self.response_formatter.format_for_chat(text, tool_results)
        
        return ProcessedResponse(
            original_text=text,
            tool_calls=tool_calls,
            formatted_text=formatted_text,
            tool_results=tool_results
        )
    
    async def process_streaming_response(self, text_stream):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç"""
        full_text = ""
        async for chunk in text_stream:
            full_text += chunk
            yield chunk
        
        # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool calls
        if full_text:
            processed = await self.process_complete_response(full_text)
            if processed.tool_calls:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                for result in processed.tool_results:
                    if result.get('success'):
                        yield f"\n\n‚úÖ {result.get('result', '')}"
                    else:
                        yield f"\n\n‚ùå Error: {result.get('error', '')}"
    
    def _clean_ai_internal_code(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ AI –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º python –±–ª–æ–∫–∏
        text = re.sub(r'```python\s*\n.*?\n```', '', text, flags=re.DOTALL)
        # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ python
        text = re.sub(r'^python\s*$', '', text, flags=re.MULTILINE)
        return text.strip() 