"""
Response Processor - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏
–†–∞–∑–¥–µ–ª—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ tool calls –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
"""

import re
import logging
from typing import List, Dict, Any, Optional, AsyncGenerator
from dataclasses import dataclass

from ..tools.system_tools import SystemTools
from .parallel_executor import ParallelToolExecutor

logger = logging.getLogger(__name__)

@dataclass
class ToolCall:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è tool call"""
    function_name: str
    arguments: Dict[str, Any]
    original_text: str
    start_pos: int
    end_pos: int

@dataclass
class ProcessedResponse:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    original_text: str
    tool_calls: List[ToolCall]
    formatted_text: str
    tool_results: List[Dict[str, Any]]

class ToolExtractor:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç tool calls –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ tool calls
        self.tool_patterns = [
            r'print\s*\(\s*tool_code\.([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\s*([^)]+)\s*\)\s*\)',
            r'tool_code\.([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\s*([^)]+)\s*\)',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è tool_code –∏–∑ print
        self.print_tool_pattern = r'print\s*\(\s*tool_code\.([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\s*([^)]+)\s*\)\s*\)'
    
    def extract_tool_calls(self, text: str) -> List[ToolCall]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç tool calls –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        tool_calls = []
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º print(tool_code.function()) –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        print_matches = re.finditer(self.tool_patterns[0], text, re.MULTILINE | re.DOTALL)
        
        for match in print_matches:
            try:
                function_name = match.group(1)
                args_str = match.group(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –≤—ã–∑–æ–≤ (—É—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
                if not self._is_complete_tool_call(args_str):
                    logger.warning(f"‚ö†Ô∏è TOOL EXTRACTOR: Incomplete print tool call detected: {match.group(0)[:100]}...")
                    continue
                
                # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                arguments = self._parse_arguments(args_str)
                
                tool_call = ToolCall(
                    function_name=function_name,
                    arguments=arguments,
                    original_text=match.group(0),  # print(tool_code.function())
                    start_pos=match.start(),
                    end_pos=match.end()
                )
                
                tool_calls.append(tool_call)
                logger.info(f"üîß TOOL EXTRACTOR: Found print tool call: {function_name}({arguments})")
                
            except Exception as e:
                logger.error(f"‚ùå TOOL EXTRACTOR: Error parsing print tool call: {e}")
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ tool_code.function() –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ù–û –ò–°–ö–õ–Æ–ß–ê–ï–ú –£–ñ–ï –ù–ê–ô–î–ï–ù–ù–´–ï)
        for pattern in self.tool_patterns[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º print –ø–∞—Ç—Ç–µ—Ä–Ω
            matches = re.finditer(pattern, text, re.MULTILINE | re.DOTALL)
            
            for match in matches:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç tool call –≤ print –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
                already_found = False
                for existing_call in tool_calls:
                    if (match.start() >= existing_call.start_pos and 
                        match.end() <= existing_call.end_pos):
                        already_found = True
                        break
                
                if already_found:
                    continue
                
                try:
                    function_name = match.group(1)
                    args_str = match.group(2)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –≤—ã–∑–æ–≤ (—É—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
                    if not self._is_complete_tool_call(args_str):
                        logger.warning(f"‚ö†Ô∏è TOOL EXTRACTOR: Incomplete direct tool call detected: {match.group(0)[:100]}...")
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                    arguments = self._parse_arguments(args_str)
                    
                    tool_call = ToolCall(
                        function_name=function_name,
                        arguments=arguments,
                        original_text=match.group(0),
                        start_pos=match.start(),
                        end_pos=match.end()
                    )
                    
                    tool_calls.append(tool_call)
                    logger.info(f"üîß TOOL EXTRACTOR: Found direct tool call: {function_name}({arguments})")
                    
                except Exception as e:
                    logger.error(f"‚ùå TOOL EXTRACTOR: Error parsing direct tool call: {e}")
        
        return tool_calls
    
    def _is_complete_tool_call(self, args_str: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ tool call –ø–æ–ª–Ω—ã–º (—É—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)"""
        args_str = args_str.strip()
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ), —Ç–æ —ç—Ç–æ –ø–æ–ª–Ω—ã–π –≤—ã–∑–æ–≤
        if args_str.endswith(')'):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫ –∏ –∫–∞–≤—ã—á–µ–∫
        open_parens = args_str.count('(')
        close_parens = args_str.count(')')
        open_quotes = args_str.count('"') + args_str.count("'")
        
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ —Ä–∞–≤–Ω–æ
        # –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–≤—ã—á–µ–∫ —á–µ—Ç–Ω–æ–µ, —Ç–æ —ç—Ç–æ –ø–æ–ª–Ω—ã–π –≤—ã–∑–æ–≤
        if open_parens == close_parens and open_quotes % 2 == 0:
            return True
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –µ—Å—Ç—å \n –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–Ω—ã–π –≤—ã–∑–æ–≤
        if '\n' in args_str:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞–≤—ã—á–∫—É –ø–æ—Å–ª–µ \n
            last_quote_pos = args_str.rfind('"')
            if last_quote_pos > args_str.find('\n'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞–≤—ã—á–∫–∏ –µ—Å—Ç—å –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
                remaining = args_str[last_quote_pos + 1:].strip()
                if remaining.endswith(')'):
                    return True
        
        # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–º
        if args_str.count('"') >= 2 and args_str.count(')') > 0:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–µ –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–º
            return True
        
        return False
    
    def _parse_arguments(self, args_str: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã tool call —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        arguments = {}
        
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        args_str = args_str.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏)
        if not args_str.endswith(')'):
            logger.warning(f"‚ö†Ô∏è TOOL EXTRACTOR: Incomplete tool call detected: {args_str}")
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ö–æ—Ç—è –±—ã –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
            if args_str.startswith('"') or args_str.startswith("'"):
                # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É
                quote_char = args_str[0]
                end_quote = args_str.find(quote_char, 1)
                if end_quote != -1:
                    first_arg = args_str[1:end_quote]
                    arguments["arg_0"] = first_arg
                    logger.info(f"üîß TOOL EXTRACTOR: Extracted first argument: {first_arg}")
                    return arguments
        
        # –ò—â–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: name=value
        named_pattern = r'([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*["\']([^"\']*)["\']'
        named_matches = re.findall(named_pattern, args_str)
        
        for name, value in named_matches:
            arguments[name] = value
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –±–µ—Ä–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ
        if not arguments:
            # –î–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            if '\n' in args_str:
                # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                parts = self._parse_multiline_arguments(args_str)
                for i, part in enumerate(parts):
                    if part:
                        arguments[f"arg_{i}"] = part
            else:
                # –û–±—ã—á–Ω–∞—è –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                parts = re.split(r',\s*(?=(?:[^"]*"[^"]*")*[^"]*$)', args_str)
                for i, part in enumerate(parts):
                    part = part.strip()
                    if part:
                        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ —Å–Ω–∞—Ä—É–∂–∏
                        if part.startswith('"') and part.endswith('"'):
                            part = part[1:-1]
                        elif part.startswith("'") and part.endswith("'"):
                            part = part[1:-1]
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º f-—Å—Ç—Ä–æ–∫–∏ - –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        if part.startswith('f"') and part.endswith('"'):
                            part = part[2:-1]  # –£–±–∏—Ä–∞–µ–º f" –∏ "
                        elif part.startswith("f'") and part.endswith("'"):
                            part = part[2:-1]  # –£–±–∏—Ä–∞–µ–º f' –∏ '
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        if re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', part):
                            arguments[f"arg_{i}"] = part
                        else:
                            arguments[f"arg_{i}"] = part
        
        return arguments
    
    def _parse_multiline_arguments(self, args_str: str) -> List[str]:
        """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        parts = []
        
        # –£–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–∫–æ–±–∫–∏
        if args_str.startswith('(') and args_str.endswith(')'):
            args_str = args_str[1:-1]
        
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
        first_quote = args_str.find('"')
        if first_quote != -1:
            # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            end_quote = args_str.find('"', first_quote + 1)
            if end_quote != -1:
                first_arg = args_str[first_quote + 1:end_quote]
                parts.append(first_arg)
                
                # –ò—â–µ–º –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
                remaining = args_str[end_quote + 1:].strip()
                if remaining.startswith(','):
                    remaining = remaining[1:].strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
                if remaining.startswith('"'):
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞–≤—ã—á–∫—É (—É—á–∏—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ \n)
                    content_start = 1
                    content_end = remaining.rfind('"')
                    if content_end > content_start:
                        second_arg = remaining[content_start:content_end]
                        # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                        second_arg = second_arg.replace('\\n', '\n')
                        parts.append(second_arg)
        
        return parts

class ToolExecutor:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç tool calls"""
    
    def __init__(self, ai_client):
        self.ai_client = ai_client
    
    def execute_tool_call(self, tool_call: ToolCall, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω tool call"""
        try:
            logger.info(f"üîß TOOL EXECUTOR: Executing {tool_call.function_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ system_tools
            system_tools = self.ai_client.system_tools
            tool_function = getattr(system_tools, tool_call.function_name, None)
            if not tool_function:
                raise Exception(f"Tool function {tool_call.function_name} not found")
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            resolved_arguments = {}
            for key, value in tool_call.arguments.items():
                if isinstance(value, str) and value == 'user_profile' and context:
                    # –ü–æ–ª—É—á–∞–µ–º user_profile –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    resolved_arguments[key] = context.get('user_profile')
                else:
                    resolved_arguments[key] = value
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ
            positional_args = []
            for i in range(len(resolved_arguments)):
                arg_key = f"arg_{i}"
                if arg_key in resolved_arguments:
                    positional_args.append(resolved_arguments[arg_key])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (–Ω–µ async)
            result = tool_function(*positional_args)
            
            return {
                'success': True,
                'function': tool_call.function_name,
                'arguments': tool_call.arguments,
                'result': result,
                'original_text': tool_call.original_text
            }
            
        except Exception as e:
            logger.error(f"‚ùå TOOL EXECUTOR: Error executing {tool_call.function_name}: {e}")
            return {
                'success': False,
                'function': tool_call.function_name,
                'arguments': tool_call.arguments,
                'error': str(e),
                'original_text': tool_call.original_text
            }

class ResponseFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ (–ü–û–°–õ–ï –ø–∞—Ä—Å–∏–Ω–≥–∞)"""
    
    def format_for_chat(self, text: str, tool_results: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ tools"""
        formatted_text = text
        
        # –ó–∞–º–µ–Ω—è–µ–º tool calls –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in tool_results:
            if result['success']:
                replacement = f"\n\n**–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n{result['result']}\n\n"
            else:
                replacement = f"\n\n**–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n{result['error']}\n\n"
            
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π tool call –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_text = formatted_text.replace(result['original_text'], replacement)
        
        return formatted_text

class ResponseProcessor:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, ai_client):
        self.ai_client = ai_client
        self.extractor = ToolExtractor()
        self.executor = ToolExecutor(ai_client)
        self.formatter = ResponseFormatter()
        self.parallel_executor = ParallelToolExecutor()  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    
    async def process_complete_response(self, text: str, context: Dict[str, Any] = None) -> ProcessedResponse:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tool calls
            tool_calls = self.extractor.extract_tool_calls(text)
            logger.info(f"üîß RESPONSE PROCESSOR: Found {len(tool_calls)} tool calls")
            
            tool_results = []
            
            if tool_calls:
                # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö tool calls
                if len(tool_calls) > 1:
                    logger.info(f"üöÄ RESPONSE PROCESSOR: Using parallel execution for {len(tool_calls)} tools")
                    tool_call_strings = [tc.original_text for tc in tool_calls]
                    parallel_results = await self.parallel_executor.execute_tools_parallel(tool_call_strings)
                    tool_results = parallel_results
                else:
                    # –û–±—ã—á–Ω–æ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ tool call
                    for tool_call in tool_calls:
                        result = self.executor.execute_tool_call(tool_call, context)
                        tool_results.append(result)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞
            formatted_text = self.formatter.format_for_chat(text, tool_results)
            
            return ProcessedResponse(
                original_text=text,
                tool_calls=tool_calls,
                formatted_text=formatted_text,
                tool_results=tool_results
            )
            
        except Exception as e:
            logger.error(f"‚ùå RESPONSE PROCESSOR ERROR: {e}")
            return ProcessedResponse(
                original_text=text,
                tool_calls=[],
                formatted_text=text,
                tool_results=[]
            )
    
    async def process_streaming_response(self, text_stream):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏"""
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        full_text = ""
        
        async for chunk in text_stream:
            full_text += chunk
            yield chunk
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool calls –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        processed = await self.process_complete_response(full_text)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã tool calls, –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ tool calls –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if processed.tool_results:
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ tool calls, –Ω–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            for result in processed.tool_results:
                if result.get('success', False):
                    replacement = f"\n\n**–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n{result.get('result', '')}\n\n"
                else:
                    replacement = f"\n\n**–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n{result.get('error', '')}\n\n"
                
                # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π tool call –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                original_text = result.get('original_text', '')
                if original_text:
                    full_text = full_text.replace(original_text, replacement)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            yield full_text 