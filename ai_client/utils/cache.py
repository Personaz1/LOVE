"""
–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import time
import json
import os
import asyncio
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class SystemCache:
    """–ö—ç—à –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å Redis"""
    
    def __init__(self):
        self.cache_dir = "cache"
        self.ensure_cache_dir()
        
        # –ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.memory_cache = {}
        
        # Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            import redis
            self.redis_client = redis.Redis(host='localhost', port=6379, db=0)
            self.redis_available = True
            logger.info("‚úÖ Redis cache initialized")
        except Exception as e:
            self.redis_available = False
            logger.warning(f"‚ö†Ô∏è Redis not available, using file cache: {e}")
        
    def ensure_cache_dir(self):
        """–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫—ç—à–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.cache_dir):
            os.makedirs(self.cache_dir)
            logger.info(f"‚úÖ Created cache directory: {self.cache_dir}")
    
    def get_cache_key(self, operation: str, params: Dict[str, Any] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞"""
        key_parts = [operation]
        if params:
            for k, v in sorted(params.items()):
                key_parts.append(f"{k}={v}")
        return "_".join(key_parts)
    
    def get(self, operation: str, params: Dict[str, Any] = None, ttl_seconds: int = 600) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        try:
            cache_key = self.get_cache_key(operation, params)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º Redis
            if self.redis_available:
                try:
                    data = self.redis_client.get(cache_key)
                    if data:
                        logger.info(f"‚úÖ Cache HIT (Redis): {operation}")
                        return json.loads(data)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Redis get error: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
            if cache_key in self.memory_cache:
                cached_data = self.memory_cache[cache_key]
                if time.time() - cached_data["timestamp"] < ttl_seconds:
                    logger.info(f"‚úÖ Cache HIT (memory): {operation}")
                    return cached_data["data"]
                else:
                    del self.memory_cache[cache_key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
            cache_file = os.path.join(self.cache_dir, f"{cache_key}.json")
            if os.path.exists(cache_file):
                try:
                    with open(cache_file, 'r', encoding='utf-8') as f:
                        cached_data = json.load(f)
                    
                    if time.time() - cached_data["timestamp"] < ttl_seconds:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å
                        self.memory_cache[cache_key] = cached_data
                        logger.info(f"‚úÖ Cache HIT (file): {operation}")
                        return cached_data["data"]
                    else:
                        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª
                        os.remove(cache_file)
                        logger.info(f"üóëÔ∏è Removed expired cache: {operation}")
                except (json.JSONDecodeError, IOError) as e:
                    logger.warning(f"‚ö†Ô∏è Corrupted cache file {cache_file}: {e}")
                    try:
                        os.remove(cache_file)
                    except:
                        pass
            
            logger.info(f"‚ùå Cache MISS: {operation}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Cache get error: {e}")
            return None
    
    def set(self, operation: str, data: Dict[str, Any], params: Dict[str, Any] = None, ttl_seconds: int = 600):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        try:
            cache_key = self.get_cache_key(operation, params)
            cache_data = {
                "data": data,
                "timestamp": time.time(),
                "ttl_seconds": ttl_seconds,
                "created_at": datetime.now().isoformat()
            }
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            if self.redis_available:
                try:
                    self.redis_client.setex(cache_key, ttl_seconds, json.dumps(data))
                    logger.info(f"üíæ Cache SET (Redis): {operation} (TTL: {ttl_seconds}s)")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Redis set error: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.memory_cache[cache_key] = cache_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∫–∞–∫ fallback
            cache_file = os.path.join(self.cache_dir, f"{cache_key}.json")
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ Cache SET (file): {operation} (TTL: {ttl_seconds}s)")
            
        except Exception as e:
            logger.error(f"‚ùå Cache set error: {e}")
    
    def invalidate(self, operation: str, params: Dict[str, Any] = None):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à"""
        try:
            cache_key = self.get_cache_key(operation, params)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            if cache_key in self.memory_cache:
                del self.memory_cache[cache_key]
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            cache_file = os.path.join(self.cache_dir, f"{cache_key}.json")
            if os.path.exists(cache_file):
                os.remove(cache_file)
            
            logger.info(f"üóëÔ∏è Cache INVALIDATED: {operation}")
            
        except Exception as e:
            logger.error(f"‚ùå Cache invalidate error: {e}")
    
    def clear_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à"""
        try:
            # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
            self.memory_cache.clear()
            
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
            for file in os.listdir(self.cache_dir):
                if file.endswith('.json'):
                    os.remove(os.path.join(self.cache_dir, file))
            
            logger.info("üóëÔ∏è Cache CLEARED: All data removed")
            
        except Exception as e:
            logger.error(f"‚ùå Cache clear error: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        try:
            memory_count = len(self.memory_cache)
            file_count = len([f for f in os.listdir(self.cache_dir) if f.endswith('.json')])
            
            return {
                "memory_entries": memory_count,
                "file_entries": file_count,
                "cache_dir": self.cache_dir
            }
            
        except Exception as e:
            logger.error(f"‚ùå Cache stats error: {e}")
            return {"error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
system_cache = SystemCache() 