"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤
"""

import logging
from typing import List, Dict, Any, Optional
from ..models.gemini_client import GeminiClient
from prompts.tips_prompt import build_tips_prompt

logger = logging.getLogger(__name__)

class TipsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–≤–µ—Ç–æ–≤"""
        self.gemini_client = GeminiClient()
        logger.info("üöÄ TipsGenerator initialized")
    
    def generate_tips(self, context: str = "", user_profile: Optional[Dict[str, Any]] = None) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 3 –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
            user_profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∏–∑ 3 —Å–æ–≤–µ—Ç–æ–≤
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤
            prompt = build_tips_prompt(context, user_profile)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã —á–µ—Ä–µ–∑ LLM
            response = self.gemini_client.chat(
                message=prompt,
                user_profile=user_profile,
                system_prompt="You are a relationship and personal development expert. Generate exactly 3 practical, actionable tips based on the context provided. Keep each tip concise and specific."
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–≤–µ—Ç—ã
            tips = self._parse_tips_response(response)
            
            logger.info(f"‚úÖ Generated {len(tips)} dynamic tips")
            return tips
            
        except Exception as e:
            logger.error(f"‚ùå Error generating tips: {e}")
            # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã - —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
            return self._get_fallback_tips()
    
    def _parse_tips_response(self, response: str) -> List[str]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–≤–µ—Ç—ã"""
        try:
            # –ò—â–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            lines = response.strip().split('\n')
            tips = []
            
            for line in lines:
                line = line.strip()
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ (1., 2., 3.)
                if line and (line[0].isdigit() or line.startswith('‚Ä¢') or line.startswith('-') or line.startswith('*')):
                    # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä/–º–∞—Ä–∫–µ—Ä –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                    tip = line.lstrip('0123456789.‚Ä¢-* ').strip()
                    if tip:
                        tips.append(tip)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ 3+ —Å–æ–≤–µ—Ç–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
            if len(tips) >= 3:
                return tips[:3]
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–µ–Ω—å—à–µ 3, –¥–æ–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–º–∏
            elif len(tips) > 0:
                fallback_tips = self._get_fallback_tips()
                return tips + fallback_tips[:3-len(tips)]
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ
                return self._get_fallback_tips()
                
        except Exception as e:
            logger.error(f"‚ùå Error parsing tips response: {e}")
            return self._get_fallback_tips()

    def _get_fallback_tips(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è fallback"""
        return [
            "Focus on open communication",
            "Practice active listening", 
            "Take time for self-care"
        ]

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
__all__ = ['TipsGenerator'] 