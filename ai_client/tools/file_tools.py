"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
"""

import os
import glob
from typing import Optional, Dict, Any
import mimetypes
from datetime import datetime

from ..utils.config import Config
from ..utils.logger import Logger
from ..utils.error_handler import ErrorHandler

logger = Logger()

class FileTools:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FileTools"""
        self.config = Config()
        self.error_handler = ErrorHandler()
        self.project_root = self.config.get_project_root()
    
    def read_file(self, path: str) -> str:
        """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if path.startswith('/'):
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
                path = path.lstrip('/')
                full_path = os.path.join(self.project_root, path)
            else:
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                full_path = os.path.join(self.project_root, path)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∞–π–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
            full_path = os.path.abspath(full_path)
            if not full_path.startswith(self.project_root):
                logger.error(f"Access denied: File {path} is outside project directory")
                return "‚ùå Access denied: File is outside project directory"
            
            if not os.path.exists(full_path):
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ñ–∞–π–ª—ã
                similar_files = self._find_similar_files(path)
                if similar_files:
                    return f"‚ùå File not found: {path}\n\nSimilar files found:\n{similar_files}"
                else:
                    return f"‚ùå File not found: {path}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
            encoding = 'utf-8'
            try:
                with open(full_path, 'r', encoding=encoding) as f:
                    content = f.read()
            except UnicodeDecodeError:
                # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                for enc in ['latin-1', 'cp1252', 'iso-8859-1']:
                    try:
                        with open(full_path, 'r', encoding=enc) as f:
                            content = f.read()
                        break
                    except UnicodeDecodeError:
                        continue
                else:
                    return f"‚ùå Cannot read file {path}: encoding issues"
            
            return content
            
        except Exception as e:
            logger.error(f"Error reading file {path}: {e}")
            return f"‚ùå Error reading file: {str(e)}"
    
    def write_file(self, path: str, content: str) -> bool:
        """–ó–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Ñ–∞–π–ª"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            full_path = os.path.abspath(path)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—É—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            if not full_path.startswith(self.project_root):
                logger.error(f"Access denied: Path {path} is outside project directory")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(full_path), exist_ok=True)
            
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"üìù Wrote file: {path} ({len(content)} chars)")
            return True
            
        except Exception as e:
            logger.error(f"Error writing file {path}: {e}")
            return False
    
    def create_file(self, path: str, content: str = "") -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            full_path = os.path.abspath(path)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—É—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            if not full_path.startswith(self.project_root):
                logger.error(f"Access denied: Path {path} is outside project directory")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if os.path.exists(full_path):
                logger.warning(f"File already exists: {path}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(full_path), exist_ok=True)
            
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚ú® Created file: {path}")
            return True
            
        except Exception as e:
            logger.error(f"Error creating file {path}: {e}")
            return False
    
    def edit_file(self, path: str, content: str) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            full_path = os.path.abspath(path)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—É—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            if not full_path.startswith(self.project_root):
                logger.error(f"Access denied: Path {path} is outside project directory")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if not os.path.exists(full_path):
                logger.error(f"File not found: {path}")
                return False
            
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚úèÔ∏è Edited file: {path} ({len(content)} chars)")
            return True
            
        except Exception as e:
            logger.error(f"Error editing file {path}: {e}")
            return False
    
    def list_files(self, directory: str = "") -> str:
        """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            if not directory:
                directory = self.project_root
            elif directory.startswith('/'):
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
                directory = directory.lstrip('/')
                if directory == "":
                    directory = self.project_root
                else:
                    directory = os.path.join(self.project_root, directory)
            else:
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                directory = os.path.join(self.project_root, directory)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
            full_path = os.path.abspath(directory)
            if not full_path.startswith(self.project_root):
                logger.error(f"Access denied: Directory {directory} is outside project directory")
                return "‚ùå Access denied: Directory is outside project"
            
            if not os.path.exists(full_path):
                return f"‚ùå Directory not found: {directory}"
            
            files = []
            for item in os.listdir(full_path):
                item_path = os.path.join(full_path, item)
                if os.path.isfile(item_path):
                    size = os.path.getsize(item_path)
                    files.append(f"üìÑ {item} ({size} bytes)")
                elif os.path.isdir(item_path):
                    files.append(f"üìÅ {item}/")
            
            if not files:
                return f"üìÇ Directory {directory} is empty"
            
            return f"üìÇ Contents of {directory}:\n" + "\n".join(files)
            
        except Exception as e:
            logger.error(f"Error listing files in {directory}: {e}")
            return f"‚ùå Error listing files: {str(e)}"
    
    def search_files(self, query: str) -> str:
        """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        try:
            results = []
            
            # –ò—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö –ø—Ä–æ–µ–∫—Ç–∞
            search_dirs = [
                self.project_root,
                os.path.join(self.project_root, 'guardian_sandbox'),
                os.path.join(self.project_root, 'memory'),
                os.path.join(self.project_root, 'prompts'),
                os.path.join(self.project_root, 'static'),
                os.path.join(self.project_root, 'templates')
            ]
            
            for search_dir in search_dirs:
                if os.path.exists(search_dir):
                    for root, dirs, files in os.walk(search_dir):
                        for file in files:
                            if query.lower() in file.lower():
                                rel_path = os.path.relpath(os.path.join(root, file), self.project_root)
                                results.append(f"üìÑ {rel_path}")
            
            if results:
                return f"üîç Search results for '{query}':\n" + "\n".join(results[:20])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            else:
                return f"üîç No files found matching '{query}'"
            
        except Exception as e:
            logger.error(f"Error searching files for '{query}': {e}")
            return f"‚ùå Error searching files: {str(e)}"
    
    def get_file_info(self, path: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        try:
            full_path = os.path.abspath(path)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—É—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
            if not full_path.startswith(self.project_root):
                return "‚ùå Access denied: File is outside project directory"
            
            if not os.path.exists(full_path):
                return f"‚ùå File not found: {path}"
            
            stat = os.stat(full_path)
            size = stat.st_size
            modified = datetime.fromtimestamp(stat.st_mtime)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type, _ = mimetypes.guess_type(full_path)
            
            info = f"üìÑ File: {path}\n"
            info += f"üìè Size: {size} bytes\n"
            info += f"üìÖ Modified: {modified.strftime('%Y-%m-%d %H:%M:%S')}\n"
            info += f"üîß Type: {mime_type or 'unknown'}\n"
            
            if os.path.isfile(full_path):
                info += "üìÑ Type: File"
            elif os.path.isdir(full_path):
                info += "üìÅ Type: Directory"
            
            return info
            
        except Exception as e:
            logger.error(f"Error getting file info for {path}: {e}")
            return f"‚ùå Error getting file info: {str(e)}"
    
    def delete_file(self, path: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            full_path = os.path.abspath(path)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—É—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
            if not full_path.startswith(self.project_root):
                logger.error(f"Access denied: Path {path} is outside project directory")
                return False
            
            if not os.path.exists(full_path):
                logger.error(f"File not found: {path}")
                return False
            
            os.remove(full_path)
            logger.info(f"üóëÔ∏è Deleted file: {path}")
            return True
            
        except Exception as e:
            logger.error(f"Error deleting file {path}: {e}")
            return False
    
    def create_directory(self, path: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            full_path = os.path.abspath(path)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—É—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
            if not full_path.startswith(self.project_root):
                logger.error(f"Access denied: Path {path} is outside project directory")
                return False
            
            if os.path.exists(full_path):
                logger.warning(f"Directory already exists: {path}")
                return False
            
            os.makedirs(full_path, exist_ok=True)
            logger.info(f"üìÅ Created directory: {path}")
            return True
            
        except Exception as e:
            logger.error(f"Error creating directory {path}: {e}")
            return False
    
    def _find_similar_files(self, target_path: str) -> str:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            similar_files = []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
            target_name = os.path.basename(target_path)
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
            search_dirs = [
                self.project_root,
                os.path.join(self.project_root, 'guardian_sandbox'),
                os.path.join(self.project_root, 'memory'),
                os.path.join(self.project_root, 'prompts'),
                os.path.join(self.project_root, 'static'),
                os.path.join(self.project_root, 'templates')
            ]
            
            for search_dir in search_dirs:
                if os.path.exists(search_dir):
                    for root, dirs, files in os.walk(search_dir):
                        for file in files:
                            if target_name.lower() in file.lower() or file.lower() in target_name.lower():
                                rel_path = os.path.relpath(os.path.join(root, file), self.project_root)
                                similar_files.append(f"üìÑ {rel_path}")
            
            if similar_files:
                return "\n".join(similar_files[:10])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            else:
                return "No similar files found"
            
        except Exception as e:
            logger.error(f"Error finding similar files for {target_path}: {e}")
            return "Error finding similar files"
    
    # Sandbox –æ–ø–µ—Ä–∞—Ü–∏–∏
    def create_sandbox_file(self, path: str, content: str = "") -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ"""
        sandbox_path = os.path.join(self.project_root, 'guardian_sandbox', path)
        return self.create_file(sandbox_path, content)
    
    def create_downloadable_file(self, filename: str, content: str, file_type: str = "txt") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            downloads_dir = os.path.join(self.project_root, 'guardian_sandbox', 'downloads')
            os.makedirs(downloads_dir, exist_ok=True)
            
            file_path = os.path.join(downloads_dir, f"{filename}.{file_type}")
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"üì• Created downloadable file: {file_path}")
            return f"‚úÖ File created: {file_path}"
            
        except Exception as e:
            logger.error(f"Error creating downloadable file: {e}")
            return f"‚ùå Error creating file: {str(e)}"
    
    def edit_sandbox_file(self, path: str, content: str) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ"""
        sandbox_path = os.path.join(self.project_root, 'guardian_sandbox', path)
        return self.edit_file(sandbox_path, content)
    
    def read_sandbox_file(self, path: str) -> str:
        """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—ã"""
        sandbox_path = os.path.join(self.project_root, 'guardian_sandbox', path)
        return self.read_file(sandbox_path)
    
    def list_sandbox_files(self, directory: str = "") -> str:
        """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ"""
        sandbox_dir = os.path.join(self.project_root, 'guardian_sandbox', directory)
        return self.list_files(sandbox_dir)
    
    def delete_sandbox_file(self, path: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—ã"""
        sandbox_path = os.path.join(self.project_root, 'guardian_sandbox', path)
        return self.delete_file(sandbox_path) 