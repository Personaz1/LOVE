"""
ŒîŒ£ Guardian Personality Engine v4.0
–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ trait_weights
"""

import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

from ai_client.core.client import AIClient
from ai_client.utils.logger import Logger
from ai.reinforcement_tagger import reinforcement_tagger
from ai.style_adapter import style_adapter

logger = Logger()

class PersonalityDimension(Enum):
    OPENNESS = "openness"
    CONSCIENTIOUSNESS = "conscientiousness"
    EXTRAVERSION = "extraversion"
    AGREEABLENESS = "agreeableness"
    NEUROTICISM = "neuroticism"

class GuardianTrait(Enum):
    PROTECTIVE = "protective"
    WISE = "wise"
    ADAPTIVE = "adaptive"
    EMPATHETIC = "empathetic"

@dataclass
class PersonalityState:
    timestamp: datetime
    user: str
    base_traits: Dict[str, float]
    guardian_traits: Dict[str, float]
    context_weights: Dict[str, float]
    emotional_state: Dict[str, Any]
    interaction_history: List[Dict[str, Any]]
    evolution_parameters: Dict[str, float]

class PersonalityEngine:
    """–î–≤–∏–∂–æ–∫ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"""
    
    def __init__(self):
        self.ai_client = AIClient()
        self.trait_weights_file = "memory/trait_weights.json"
        self.personality_states: Dict[str, PersonalityState] = {}
        self.evolution_history: List[Dict[str, Any]] = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞ —á–µ—Ä—Ç
        self.trait_weights = self._load_trait_weights()
        
        logger.info("üß¨ ŒîŒ£ Personality Engine initialized")
    
    def _load_trait_weights(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏"""
        try:
            with open(self.trait_weights_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è Trait weights file not found, using defaults")
            return self._get_default_trait_weights()
    
    def _get_default_trait_weights(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≤–µ—Å–æ–≤ —á–µ—Ä—Ç"""
        return {
            "personality_traits": {
                "openness": {"weight": 0.8},
                "conscientiousness": {"weight": 0.9},
                "extraversion": {"weight": 0.6},
                "agreeableness": {"weight": 0.7},
                "neuroticism": {"weight": 0.3}
            },
            "guardian_traits": {
                "protective": {"weight": 0.9},
                "wise": {"weight": 0.8},
                "adaptive": {"weight": 0.9},
                "empathetic": {"weight": 0.8}
            }
        }
    
    def get_personality_state(self, user: str) -> PersonalityState:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏"""
        if user in self.personality_states:
            return self.personality_states[user]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
        state = PersonalityState(
            timestamp=datetime.now(),
            user=user,
            base_traits=self._get_base_traits(),
            guardian_traits=self._get_guardian_traits(),
            context_weights=self._get_context_weights(),
            emotional_state=self._get_emotional_state(),
            interaction_history=[],
            evolution_parameters=self._get_evolution_parameters()
        )
        
        self.personality_states[user] = state
        return state
    
    def _get_base_traits(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏"""
        traits = {}
        for trait_name, trait_data in self.trait_weights["personality_traits"].items():
            traits[trait_name] = trait_data["weight"]
        return traits
    
    def _get_guardian_traits(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä—Ç Guardian"""
        traits = {}
        for trait_name, trait_data in self.trait_weights["guardian_traits"].items():
            traits[trait_name] = trait_data["weight"]
        return traits
    
    def _get_context_weights(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –≤–µ—Å–æ–≤"""
        return self.trait_weights.get("context_weights", {})
    
    def _get_emotional_state(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return {
            "mood": "neutral",
            "energy": 0.7,
            "stress": 0.2,
            "focus": 0.8,
            "empathy": 0.8
        }
    
    def _get_evolution_parameters(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏"""
        return self.trait_weights.get("evolution_parameters", {})
    
    def adapt_personality(self, user: str, interaction_context: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        state = self.get_personality_state(user)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        context_analysis = self._analyze_interaction_context(interaction_context)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        user_prefs = reinforcement_tagger.get_user_preferences(user)
        style_rec = reinforcement_tagger.get_style_recommendation(user, interaction_context)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏
        adapted_traits = self._adapt_traits(state, context_analysis, user_prefs, style_rec)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.base_traits.update(adapted_traits["base_traits"])
        state.guardian_traits.update(adapted_traits["guardian_traits"])
        state.emotional_state.update(adapted_traits["emotional_state"])
        
        # –õ–æ–≥–∏—Ä—É–µ–º —ç–≤–æ–ª—é—Ü–∏—é
        self._log_evolution(user, adapted_traits, context_analysis)
        
        logger.info(f"üß¨ Personality adapted for {user}")
        return adapted_traits
    
    def _analyze_interaction_context(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        analysis = {
            "user_mood": context.get("user_mood", "neutral"),
            "interaction_type": context.get("type", "general"),
            "complexity_level": context.get("complexity", "medium"),
            "urgency": context.get("urgency", "normal"),
            "emotional_intensity": context.get("emotional_intensity", 0.5)
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ —á–µ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        required_traits = []
        
        if analysis["complexity_level"] == "high":
            required_traits.extend(["openness", "conscientiousness"])
        if analysis["urgency"] == "high":
            required_traits.extend(["conscientiousness", "adaptive"])
        if analysis["emotional_intensity"] > 0.7:
            required_traits.extend(["empathetic", "protective"])
        if analysis["interaction_type"] == "problem_solving":
            required_traits.extend(["wise", "adaptive"])
        
        analysis["required_traits"] = list(set(required_traits))
        return analysis
    
    def _adapt_traits(self, state: PersonalityState, context_analysis: Dict[str, Any],
                      user_prefs: Dict[str, Any], style_rec: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏"""
        adaptation_rate = state.evolution_parameters.get("learning_rate", 0.1)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —á–µ—Ä—Ç—ã
        adapted_base_traits = {}
        for trait_name, current_weight in state.base_traits.items():
            if trait_name in context_analysis["required_traits"]:
                # –£—Å–∏–ª–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ —á–µ—Ä—Ç—ã
                new_weight = min(1.0, current_weight + adaptation_rate)
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ —Å–ª–µ–≥–∫–∞ –æ—Å–ª–∞–±–ª—è–µ–º
                new_weight = max(0.0, current_weight - adaptation_rate * 0.1)
            adapted_base_traits[trait_name] = new_weight
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —á–µ—Ä—Ç—ã Guardian
        adapted_guardian_traits = {}
        for trait_name, current_weight in state.guardian_traits.items():
            if trait_name in context_analysis["required_traits"]:
                new_weight = min(1.0, current_weight + adaptation_rate)
            else:
                new_weight = max(0.0, current_weight - adaptation_rate * 0.1)
            adapted_guardian_traits[trait_name] = new_weight
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        adapted_emotional_state = self._adapt_emotional_state(state.emotional_state, context_analysis)
        
        return {
            "base_traits": adapted_base_traits,
            "guardian_traits": adapted_guardian_traits,
            "emotional_state": adapted_emotional_state
        }
    
    def _adapt_emotional_state(self, current_state: Dict[str, Any], 
                              context_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        adapted_state = current_state.copy()
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_mood = context_analysis["user_mood"]
        if user_mood == "frustrated":
            adapted_state["empathy"] = min(1.0, adapted_state["empathy"] + 0.2)
            adapted_state["focus"] = min(1.0, adapted_state["focus"] + 0.1)
        elif user_mood == "excited":
            adapted_state["energy"] = min(1.0, adapted_state["energy"] + 0.2)
            adapted_state["mood"] = "enthusiastic"
        elif user_mood == "analytical":
            adapted_state["focus"] = min(1.0, adapted_state["focus"] + 0.2)
            adapted_state["stress"] = max(0.0, adapted_state["stress"] - 0.1)
        
        return adapted_state
    
    def _log_evolution(self, user: str, adapted_traits: Dict[str, Any], 
                       context_analysis: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        evolution_record = {
            "timestamp": datetime.now().isoformat(),
            "user": user,
            "context": context_analysis,
            "adaptations": adapted_traits,
            "evolution_type": "interaction_based"
        }
        
        self.evolution_history.append(evolution_record)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        try:
            with open("memory/personality_evolution.jsonl", 'a', encoding='utf-8') as f:
                json.dump(evolution_record, f, ensure_ascii=False)
                f.write('\n')
        except Exception as e:
            logger.error(f"‚ùå Failed to log personality evolution: {e}")
    
    def generate_personality_response(self, user: str, message: str, 
                                    context: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏"""
        state = self.get_personality_state(user)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        adapted_traits = self.adapt_personality(user, context)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏
        personality_prompt = self._create_personality_prompt(message, state, adapted_traits, context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
        response = self.ai_client.chat(personality_prompt)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞
        adapted_response = style_adapter.adapt_response_style(user, response, context)
        
        return adapted_response
    
    def _create_personality_prompt(self, message: str, state: PersonalityState,
                                  adapted_traits: Dict[str, Any], 
                                  context: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã
        base_traits = adapted_traits["base_traits"]
        guardian_traits = adapted_traits["guardian_traits"]
        
        dominant_base = max(base_traits.items(), key=lambda x: x[1])
        dominant_guardian = max(guardian_traits.items(), key=lambda x: x[1])
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
        personality_description = f"""
        –¢—ã - ŒîŒ£ Guardian —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é:
        
        –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã:
        ‚Ä¢ {dominant_base[0]}: {dominant_base[1]:.2f}
        ‚Ä¢ {dominant_guardian[0]}: {dominant_guardian[1]:.2f}
        
        –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
        ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {state.emotional_state['mood']}
        ‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è: {state.emotional_state['energy']:.2f}
        ‚Ä¢ –≠–º–ø–∞—Ç–∏—è: {state.emotional_state['empathy']:.2f}
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(context, ensure_ascii=False)}
        
        –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}
        
        –û—Ç–≤–µ—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
        """
        
        return personality_description
    
    def get_personality_report(self, user: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        state = self.get_personality_state(user)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã —ç–≤–æ–ª—é—Ü–∏–∏
        evolution_trends = self._analyze_evolution_trends(user)
        
        report = f"""
üß¨ –õ–ò–ß–ù–û–°–¢–¨ ŒîŒ£ GUARDIAN: {user}

üìä –ë–ê–ó–û–í–´–ï –ß–ï–†–¢–´:
"""
        
        for trait_name, weight in state.base_traits.items():
            report += f"‚Ä¢ {trait_name}: {weight:.2f}\n"
        
        report += f"""
üõ°Ô∏è GUARDIAN –ß–ï–†–¢–´:
"""
        
        for trait_name, weight in state.guardian_traits.items():
            report += f"‚Ä¢ {trait_name}: {weight:.2f}\n"
        
        report += f"""
üí≠ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {state.emotional_state['mood']}
‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è: {state.emotional_state['energy']:.2f}
‚Ä¢ –°—Ç—Ä–µ—Å—Å: {state.emotional_state['stress']:.2f}
‚Ä¢ –§–æ–∫—É—Å: {state.emotional_state['focus']:.2f}
‚Ä¢ –≠–º–ø–∞—Ç–∏—è: {state.emotional_state['empathy']:.2f}

üìà –¢–†–ï–ù–î–´ –≠–í–û–õ–Æ–¶–ò–ò:
‚Ä¢ –û–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {evolution_trends.get('direction', 'stable')}
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π: {evolution_trends.get('change_rate', 'medium')}
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {evolution_trends.get('stability', 'high')}
        """
        
        return report.strip()
    
    def _analyze_evolution_trends(self, user: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        try:
            with open("memory/personality_evolution.jsonl", 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            user_evolution = []
            for line in lines:
                if line.strip():
                    record = json.loads(line)
                    if record.get("user") == user:
                        user_evolution.append(record)
            
            if len(user_evolution) < 2:
                return {"direction": "insufficient_data", "change_rate": "low", "stability": "unknown"}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            recent_changes = []
            for i in range(1, len(user_evolution)):
                prev = user_evolution[i-1]
                curr = user_evolution[i]
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–µ—Ä—Ç—ã
                prev_traits = prev["adaptations"]["base_traits"]
                curr_traits = curr["adaptations"]["base_traits"]
                
                for trait in prev_traits:
                    if trait in curr_traits:
                        change = curr_traits[trait] - prev_traits[trait]
                        recent_changes.append(change)
            
            avg_change = sum(recent_changes) / len(recent_changes) if recent_changes else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if avg_change > 0.05:
                direction = "strengthening"
            elif avg_change < -0.05:
                direction = "weakening"
            else:
                direction = "stable"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
            change_magnitude = abs(avg_change)
            if change_magnitude > 0.1:
                change_rate = "high"
            elif change_magnitude > 0.05:
                change_rate = "medium"
            else:
                change_rate = "low"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            change_variance = sum((c - avg_change) ** 2 for c in recent_changes) / len(recent_changes) if recent_changes else 0
            if change_variance < 0.01:
                stability = "high"
            elif change_variance < 0.05:
                stability = "medium"
            else:
                stability = "low"
            
            return {
                "direction": direction,
                "change_rate": change_rate,
                "stability": stability,
                "avg_change": avg_change,
                "total_adaptations": len(user_evolution)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Evolution trend analysis failed: {e}")
            return {"direction": "error", "change_rate": "unknown", "stability": "unknown"}
    
    def reset_personality(self, user: str):
        """–°–±—Ä–æ—Å –ª–∏—á–Ω–æ—Å—Ç–∏ –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º"""
        if user in self.personality_states:
            del self.personality_states[user]
        
        logger.info(f"üîÑ Personality reset for {user}")
    
    def schedule_personality_maintenance(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏"""
        # –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
        scheduler.schedule_periodic_task(
            task_type="personality_maintenance",
            interval_minutes=720,  # 12 —á–∞—Å–æ–≤
            name="Personality Maintenance",
            description="Analyze and maintain personality evolution",
            priority=TaskPriority.BACKGROUND
        )
        
        logger.info("üìÖ Scheduled personality maintenance")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
personality_engine = PersonalityEngine() 