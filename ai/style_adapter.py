"""
ŒîŒ£ Guardian Style Adapter v4.0
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import json
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

from ai_client.core.client import AIClient
from ai_client.utils.logger import Logger
from ai.reinforcement_tagger import reinforcement_tagger

logger = Logger()

class StyleType(Enum):
    FORMAL = "formal"
    CASUAL = "casual"
    TECHNICAL = "technical"
    EMOTIONAL = "emotional"
    CONCISE = "concise"
    DETAILED = "detailed"
    HUMOROUS = "humorous"
    SERIOUS = "serious"

class CommunicationLevel(Enum):
    BEGINNER = "beginner"
    INTERMEDIATE = "intermediate"
    EXPERT = "expert"
    SPECIALIST = "specialist"

class TechnicalDepth(Enum):
    BASIC = "basic"
    MEDIUM = "medium"
    ADVANCED = "advanced"
    EXPERT = "expert"

@dataclass
class StyleProfile:
    user: str
    primary_style: StyleType
    communication_level: CommunicationLevel
    technical_depth: TechnicalDepth
    emotional_tone: str
    response_length: str
    detail_preference: str
    humor_sensitivity: float
    formality_level: float
    confidence: float

class StyleAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä —Å—Ç–∏–ª—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.ai_client = AIClient()
        self.style_templates: Dict[str, Dict[str, Any]] = {}
        self.user_profiles: Dict[str, StyleProfile] = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å—Ç–∏–ª–µ–π
        self._load_style_templates()
        
        logger.info("üé® ŒîŒ£ Style Adapter initialized")
    
    def _load_style_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å—Ç–∏–ª–µ–π"""
        self.style_templates = {
            "formal": {
                "greeting": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å",
                "farewell": "–° —É–≤–∞–∂–µ–Ω–∏–µ–º",
                "tone": "professional",
                "sentence_structure": "complex",
                "vocabulary": "formal",
                "punctuation": "strict"
            },
            "casual": {
                "greeting": "–ü—Ä–∏–≤–µ—Ç",
                "farewell": "–ü–æ–∫–∞",
                "tone": "friendly",
                "sentence_structure": "simple",
                "vocabulary": "informal",
                "punctuation": "relaxed"
            },
            "technical": {
                "greeting": "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞",
                "farewell": "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                "tone": "analytical",
                "sentence_structure": "precise",
                "vocabulary": "technical",
                "punctuation": "precise"
            },
            "emotional": {
                "greeting": "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
                "farewell": "–î–æ –≤—Å—Ç—Ä–µ—á–∏!",
                "tone": "warm",
                "sentence_structure": "expressive",
                "vocabulary": "emotional",
                "punctuation": "expressive"
            },
            "concise": {
                "greeting": "–ì–æ—Ç–æ–≤",
                "farewell": "–ì–æ—Ç–æ–≤–æ",
                "tone": "direct",
                "sentence_structure": "short",
                "vocabulary": "minimal",
                "punctuation": "minimal"
            },
            "detailed": {
                "greeting": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É ŒîŒ£ Guardian",
                "farewell": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
                "tone": "comprehensive",
                "sentence_structure": "elaborate",
                "vocabulary": "descriptive",
                "punctuation": "detailed"
            }
        }
    
    def get_user_style_profile(self, user: str) -> StyleProfile:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user in self.user_profiles:
            return self.user_profiles[user]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
        style_rec = reinforcement_tagger.get_style_recommendation(user, {})
        comm_rec = reinforcement_tagger.get_communication_level(user)
        tech_rec = reinforcement_tagger.get_technical_depth(user)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        primary_style = StyleType(style_rec.get("style", "technical"))
        communication_level = CommunicationLevel(comm_rec.get("level", "expert"))
        technical_depth = TechnicalDepth(tech_rec.get("depth", "advanced"))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = StyleProfile(
            user=user,
            primary_style=primary_style,
            communication_level=communication_level,
            technical_depth=technical_depth,
            emotional_tone="neutral",
            response_length="medium",
            detail_preference="comprehensive",
            humor_sensitivity=0.3,
            formality_level=0.7,
            confidence=style_rec.get("confidence", 0.5)
        )
        
        self.user_profiles[user] = profile
        return profile
    
    def adapt_response_style(self, user: str, content: str, context: Dict[str, Any]) -> str:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = self.get_user_style_profile(user)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        style_rec = reinforcement_tagger.get_style_recommendation(user, context)
        comm_rec = reinforcement_tagger.get_communication_level(user)
        tech_rec = reinforcement_tagger.get_technical_depth(user)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª—å
        adapted_content = self._apply_style_adaptations(content, profile, style_rec, comm_rec, tech_rec)
        
        logger.info(f"üé® Style adapted for {user}: {profile.primary_style.value}")
        return adapted_content
    
    def _apply_style_adaptations(self, content: str, profile: StyleProfile,
                                style_rec: Dict[str, Any], comm_rec: Dict[str, Any],
                                tech_rec: Dict[str, Any]) -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–π —Å—Ç–∏–ª—è"""
        style_type = profile.primary_style.value
        template = self.style_templates.get(style_type, self.style_templates["technical"])
        
        # –ë–∞–∑–æ–≤—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        adapted_content = content
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–æ–Ω–∞
        if template["tone"] == "professional":
            adapted_content = self._make_professional(adapted_content)
        elif template["tone"] == "friendly":
            adapted_content = self._make_friendly(adapted_content)
        elif template["tone"] == "analytical":
            adapted_content = self._make_analytical(adapted_content)
        elif template["tone"] == "warm":
            adapted_content = self._make_warm(adapted_content)
        elif template["tone"] == "direct":
            adapted_content = self._make_direct(adapted_content)
        elif template["tone"] == "comprehensive":
            adapted_content = self._make_comprehensive(adapted_content)
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥–ª—É–±–∏–Ω—ã
        if tech_rec.get("depth") == "basic":
            adapted_content = self._simplify_technical(adapted_content)
        elif tech_rec.get("depth") == "expert":
            adapted_content = self._enhance_technical(adapted_content)
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        if comm_rec.get("level") == "beginner":
            adapted_content = self._add_explanations(adapted_content)
        elif comm_rec.get("level") == "expert":
            adapted_content = self._add_technical_details(adapted_content)
        
        return adapted_content
    
    def _make_professional(self, content: str) -> str:
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if not content.startswith("‚úÖ") and not content.startswith("‚ùå"):
            content = "‚úÖ " + content
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—É—é –ª–µ–∫—Å–∏–∫—É
        replacements = {
            "–¥–µ–ª–∞–µ–º": "–≤—ã–ø–æ–ª–Ω—è–µ–º",
            "—Å–æ–∑–¥–∞–µ–º": "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º",
            "–≥–æ—Ç–æ–≤–æ": "–æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            "–æ—à–∏–±–∫–∞": "–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞"
        }
        
        for old, new in replacements.items():
            content = content.replace(old, new)
        
        return content
    
    def _make_friendly(self, content: str) -> str:
        """–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if "‚úÖ" in content:
            content = content.replace("‚úÖ", "üéâ")
        if "‚ùå" in content:
            content = content.replace("‚ùå", "üòÖ")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—É—é –ª–µ–∫—Å–∏–∫—É
        replacements = {
            "–æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞": "–≥–æ—Ç–æ–≤–æ!",
            "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º": "—Å–æ–∑–¥–∞–µ–º",
            "–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞": "–µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
        }
        
        for old, new in replacements.items():
            content = content.replace(old, new)
        
        return content
    
    def _make_analytical(self, content: str) -> str:
        """–°–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if "‚úÖ" in content:
            content = content.replace("‚úÖ", "üìä –ê–ù–ê–õ–ò–ó:")
        if "‚ùå" in content:
            content = content.replace("‚ùå", "‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê:")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        lines = content.split('\n')
        structured_lines = []
        for i, line in enumerate(lines):
            if line.strip() and not line.startswith('üìä') and not line.startswith('‚ö†Ô∏è'):
                structured_lines.append(f"‚Ä¢ {line}")
            else:
                structured_lines.append(line)
        
        return '\n'.join(structured_lines)
    
    def _make_warm(self, content: str) -> str:
        """–°–¥–µ–ª–∞—Ç—å —Ç–µ–ø–ª—ã–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if "‚úÖ" in content:
            content = content.replace("‚úÖ", "üíñ –û—Ç–ª–∏—á–Ω–æ!")
        if "‚ùå" in content:
            content = content.replace("‚ùå", "ü§ó –ù–µ –≤–æ–ª–Ω—É–π—Å—è, —ç—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ª–µ–∫—Å–∏–∫—É
        replacements = {
            "–≥–æ—Ç–æ–≤–æ": "–≤—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ç–µ–±—è!",
            "–ø—Ä–æ–±–ª–µ–º–∞": "–Ω–µ–±–æ–ª—å—à–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å",
            "–æ—à–∏–±–∫–∞": "–Ω–µ–±–æ–ª—å—à–∞—è –Ω–µ—É–¥–∞—á–∞"
        }
        
        for old, new in replacements.items():
            content = content.replace(old, new)
        
        return content
    
    def _make_direct(self, content: str) -> str:
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä—è–º—ã–º"""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        content = content.replace("‚úÖ ", "")
        content = content.replace("‚ùå ", "")
        
        # –î–µ–ª–∞–µ–º –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏–º
        lines = content.split('\n')
        direct_lines = []
        for line in lines:
            if line.strip() and not line.startswith('‚Ä¢'):
                direct_lines.append(line.strip())
        
        return '\n'.join(direct_lines)
    
    def _make_comprehensive(self, content: str) -> str:
        """–°–¥–µ–ª–∞—Ç—å –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
        if "‚úÖ" in content:
            content = content.replace("‚úÖ", "üìã –ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢:")
        if "‚ùå" in content:
            content = content.replace("‚ùå", "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        lines = content.split('\n')
        comprehensive_lines = []
        for i, line in enumerate(lines):
            if line.strip() and not line.startswith('üìã') and not line.startswith('üîç'):
                comprehensive_lines.append(f"  {i+1}. {line}")
            else:
                comprehensive_lines.append(line)
        
        return '\n'.join(comprehensive_lines)
    
    def _simplify_technical(self, content: str) -> str:
        """–£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –≥–ª—É–±–∏–Ω—É"""
        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ
        replacements = {
            "API": "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "endpoint": "—Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞",
            "authentication": "–ø—Ä–æ–≤–µ—Ä–∫–∞",
            "authorization": "—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
            "database": "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "cache": "–±—ã—Å—Ç—Ä–∞—è –ø–∞–º—è—Ç—å",
            "optimization": "—É–ª—É—á—à–µ–Ω–∏–µ"
        }
        
        for tech_term, simple_term in replacements.items():
            content = content.replace(tech_term, simple_term)
        
        return content
    
    def _enhance_technical(self, content: str) -> str:
        """–£—Å–∏–ª–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –≥–ª—É–±–∏–Ω—É"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
        if "API" in content:
            content += "\n\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:\n‚Ä¢ RESTful API endpoints\n‚Ä¢ JSON response format\n‚Ä¢ HTTP status codes"
        
        if "database" in content:
            content += "\n\nüóÑÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:\n‚Ä¢ Redis cache layer\n‚Ä¢ PostgreSQL persistence\n‚Ä¢ Connection pooling"
        
        return content
    
    def _add_explanations(self, content: str) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"""
        explanations = []
        
        if "API" in content:
            explanations.append("API - —ç—Ç–æ —Å–ø–æ—Å–æ–± –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º –æ–±—â–∞—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º")
        if "database" in content:
            explanations.append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        if "cache" in content:
            explanations.append("–ö—ç—à - —ç—Ç–æ –±—ã—Å—Ç—Ä–∞—è –ø–∞–º—è—Ç—å –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        if explanations:
            content += "\n\nüí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n" + "\n".join(f"‚Ä¢ {exp}" for exp in explanations)
        
        return content
    
    def _add_technical_details(self, content: str) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
        details = []
        
        if "API" in content:
            details.append("‚Ä¢ RESTful API —Å JWT authentication")
            details.append("‚Ä¢ Rate limiting: 1000 req/min")
            details.append("‚Ä¢ Response time: <200ms")
        
        if "database" in content:
            details.append("‚Ä¢ PostgreSQL 14 —Å connection pooling")
            details.append("‚Ä¢ Redis cache —Å TTL 3600s")
            details.append("‚Ä¢ Backup strategy: daily + WAL")
        
        if details:
            content += "\n\n‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:\n" + "\n".join(details)
        
        return content
    
    def update_user_style(self, user: str, interaction_feedback: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        if user not in self.user_profiles:
            return
        
        profile = self.user_profiles[user]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        feedback_score = self._calculate_feedback_score(interaction_feedback)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if feedback_score > 0:
            # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - —É—Å–∏–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å
            profile.confidence = min(1.0, profile.confidence + 0.1)
        elif feedback_score < 0:
            # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –æ—Å–ª–∞–±–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å
            profile.confidence = max(0.0, profile.confidence - 0.1)
        
        logger.info(f"üé® Updated style for {user}: confidence {profile.confidence:.2f}")
    
    def _calculate_feedback_score(self, feedback: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        score = 0.0
        
        if feedback.get("explicit") == "positive":
            score += 1.0
        elif feedback.get("explicit") == "negative":
            score -= 1.0
        
        if feedback.get("implicit") == "positive":
            score += 0.5
        elif feedback.get("implicit") == "negative":
            score -= 0.5
        
        return score
    
    def get_style_statistics(self, user: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user not in self.user_profiles:
            return {"error": "User profile not found"}
        
        profile = self.user_profiles[user]
        
        return {
            "user": user,
            "primary_style": profile.primary_style.value,
            "communication_level": profile.communication_level.value,
            "technical_depth": profile.technical_depth.value,
            "confidence": profile.confidence,
            "style_recommendation": reinforcement_tagger.get_style_recommendation(user, {}),
            "communication_recommendation": reinforcement_tagger.get_communication_level(user),
            "technical_recommendation": reinforcement_tagger.get_technical_depth(user)
        }
    
    def generate_style_report(self, user: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = self.get_style_statistics(user)
        
        if "error" in stats:
            return f"‚ùå {stats['error']}"
        
        report = f"""
üé® –°–¢–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user}

üìä –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:
‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å: {stats['primary_style']}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {stats['communication_level']}
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞: {stats['technical_depth']}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {stats['confidence']:.2f}

üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –°—Ç–∏–ª—å: {stats['style_recommendation']['style']} (–≤–µ—Å: {stats['style_recommendation']['weight']:.2f})
‚Ä¢ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: {stats['communication_recommendation']['level']} (–≤–µ—Å: {stats['communication_recommendation']['weight']:.2f})
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∞: {stats['technical_recommendation']['depth']} (–≤–µ—Å: {stats['technical_recommendation']['weight']:.2f})
        """
        
        return report.strip()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ç–∏–ª—è
style_adapter = StyleAdapter() 